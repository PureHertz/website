[
  {
    "objectID": "works.html",
    "href": "works.html",
    "title": "Works",
    "section": "",
    "text": "tinySA UltraのPC制御\n\n\n\n\n\n\n電子回路\n\n\n\n\n\n\n\n\n\n2025-01-25\n\n\n\n\n\n\n\n\n\n\n\n\n小型マイコンボードで作るシンプルなデジタイザ\n\n\n\n\n\n\nマイコン\n\n\n電子回路\n\n\n\n\n\n\n\n\n\n2024-08-18\n\n\n\n\n\n\n\n\n\n\n\n\nQuartoでウェブサイトを作りQuarto Pubで公開する\n\n\n\n\n\n\nウェブサイト\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n2024-07-15\n\n\n\n\n\n\n\n\n\n\n\n\nCircuitPythonを使えるようにする（KB2040）\n\n\n\n\n\n\nマイコン\n\n\nPython\n\n\n\n\n\n\n\n\n\n2024-07-08\n\n\n\n\n\n\n\n\n\n\n\n\nPythonの環境構築\n\n\n\n\n\n\nPython\n\n\n\n\n\n\n\n\n\n2024-06-29\n\n\n\n\n\n\n\n\n\n\n\n\nFPGA (MachXO2) の書き込み\n\n\n\n\n\n\n電子回路\n\n\nFPGA\n\n\n\n\n\n\n\n\n\n2024-04-28\n\n\n\n\n\n\n\n\n\n\n\n\nYou Go, We Go\n\n\n\n\n\n\nMusic\n\n\nOriginal song\n\n\n\n\n\n\n\n\n\n2024-04-12\n\n\n\n\n\n\n\n\n\n\n\n\nPC制御式LDドライバに物理インターフェイスを付けてみた\n\n\n\n\n\n\n電子回路\n\n\nレーザー\n\n\nマイコン\n\n\n\n\n\n\n\n\n\n2024-03-24\n\n\n\n\n\n\n\n\n\n\n\n\nRS232C-USB変換\n\n\n\n\n\n\n実験装置\n\n\n\n\n\n\n\n\n\n2024-03-17\n\n\n\n\n\n\n\n\n\n\n\n\nQuartoでウェブサイトを作ってGitHubで公開する\n\n\n\n\n\n\nウェブサイト\n\n\nQuarto\n\n\nGitHub\n\n\n\n\n\n\n\n\n\n2024-03-10\n\n\n\n\n\n\n\n\n\n\n\n\n共振器コントローラー\n\n\n\n\n\n\n電子回路\n\n\nレーザー\n\n\n光共振器\n\n\n\n\n\n\n\n\n\n2024-03-02\n\n\n\n\n\n\n\n\n\n\n\n\n温度コントローラー\n\n\n\n\n\n\n電子回路\n\n\n温度制御\n\n\n\n\n\n\n\n\n\n2024-03-01\n\n\n\n\n\n\n\n\n\n\n\n\n低雑音アンプ用の電源の中身を見てみる\n\n\n\n\n\n\n電子回路\n\n\n低雑音電源\n\n\n\n\n\n\n\n\n\n2024-02-27\n\n\n\n\n\n\n\n\n\n\n\n\n低速受光器\n\n\n\n\n\n\n電子回路\n\n\nレーザー\n\n\n\n\n\n\n\n\n\n2024-02-23\n\n\n\n\n\n\n\n\n\n\n\n\n三角波発振器（掃引回路）\n\n\n\n\n\n\n電子回路\n\n\n\n\n\n\n\n\n\n2024-02-23\n\n\n\n\n\n\n\n\n\n\n\n\nColour of the Universe\n\n\n\n\n\n\nMusic\n\n\nOriginal song\n\n\n\n\n\n\n\n\n\n2023-06-03\n\n\n\n\n\n\n\n\n\n\n\n\nダンス万能説 -Dance Versatileness-\n\n\n\n\n\n\nMusic\n\n\nOriginal song\n\n\n\n\n\n\n\n\n\n2011-12-19\n\n\n\n\n\n\n\n\n\n\n\n\nいつもの場所\n\n\n\n\n\n\nMusic\n\n\nOriginal song\n\n\n\n\n\n\n\n\n\n2011-04-20\n\n\n\n\n\n\n\n\n\n\n\n\nGoodbye to My Days\n\n\n\n\n\n\nMusic\n\n\nOriginal song\n\n\n\n\n\n\n\n\n\n2010-03-02\n\n\n\n\n\n\n\n\n\n\n\n\nRegrets\n\n\n\n\n\n\nMusic\n\n\nOriginal song\n\n\n\n\n\n\n\n\n\n2009-08-04\n\n\n\n\n\n\n\n\n\n\n\n\nLIMIT BREAKER!!\n\n\n\n\n\n\nMusic\n\n\nOriginal song\n\n\n\n\n\n\n\n\n\n2009-04-21\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/you_go_we_go/index.html",
    "href": "posts/you_go_we_go/index.html",
    "title": "You Go, We Go",
    "section": "",
    "text": "某研究所のテーマソングのようなイメージで作成。異なる研究分野の融合によって、ともに新しい未来を創造していこうという歌です。\n\nVocal\n\nMiku Hatsune\n\nMusic & Lyrics\n\nSho Okubo\n\nLicense"
  },
  {
    "objectID": "posts/you_go_we_go/index.html#abstract",
    "href": "posts/you_go_we_go/index.html#abstract",
    "title": "You Go, We Go",
    "section": "",
    "text": "某研究所のテーマソングのようなイメージで作成。異なる研究分野の融合によって、ともに新しい未来を創造していこうという歌です。\n\nVocal\n\nMiku Hatsune\n\nMusic & Lyrics\n\nSho Okubo\n\nLicense"
  },
  {
    "objectID": "posts/you_go_we_go/index.html#play",
    "href": "posts/you_go_we_go/index.html#play",
    "title": "You Go, We Go",
    "section": "Play",
    "text": "Play\n\n\n\nYou Go, We Go / 初音ミク"
  },
  {
    "objectID": "posts/you_go_we_go/index.html#lyrics",
    "href": "posts/you_go_we_go/index.html#lyrics",
    "title": "You Go, We Go",
    "section": "Lyrics",
    "text": "Lyrics\nあの日見た 明日に僕ら立っている\n積み上げてきた 昨日で作る塔の上\n“AI”が紡いだ 言葉が時間を超えても\nその続きは 君に歌ってほしいんだ\n未だ見ぬ海原が Stage\n波が運んでくる Message\n縺れ合ういくつもの 糸が解けていく\nこの世界を変えていくために 僕ら何ができるだろう\n繋がって生まれる力を 君はもう知っている\n描いた未来へと続いていく 道はどこにあるのだろう\nともに挑み つぎを創る この手を掴んで\nYou go, we go\n限りなく 続いていく日々のために\n限りある 今を繋げて輪にする\n全てのことが Dream maker\n僕らを驚かせる Entertainer\n選り好みしていたら 置いていかれるだけさ\nこの世界を変えていくために 僕ら何ができるだろう\n種をまき花が開いたら 実をつけるまで\n遠回りで残した足跡は やがて虹を描くだろう\nともに挑み つぎを創る この手を離さず\nYou go, we go\nこの世界を変えていくために 僕ら何ができるだろう\n繋がって生まれる力で 時計の針は進む\n描いた未来へと続いていく 道を僕ら並んで歩いていこう\nもう迷わない 一歩ずつ前へ\nともに挑み つぎを創る この手を掴んで\nYou go, we go\nさあ、行こう\nその向こう\nYou go, we go"
  },
  {
    "objectID": "posts/write_Lattice_FPGA/index.html",
    "href": "posts/write_Lattice_FPGA/index.html",
    "title": "FPGA (MachXO2) の書き込み",
    "section": "",
    "text": "Lattice SemiconductorのFPGA LCMXO2-256HC（MachXO2シリーズ）は、以下のような利点があります。\n日本語資料があまり無いので、書き込んで動かせるようにするまでの一連の手順を解説します。"
  },
  {
    "objectID": "posts/write_Lattice_FPGA/index.html#はじめに",
    "href": "posts/write_Lattice_FPGA/index.html#はじめに",
    "title": "FPGA (MachXO2) の書き込み",
    "section": "はじめに",
    "text": "はじめに\n\n動作確認環境\n\n\n\n\n環境 1a\n環境 2b\n\n\n\n\nOS\nWindows 11\nWindows 10\n\n\nCPU\nAMD, RIZEN 7 3700X\nIntel, Core i7-3770\n\n\n開発環境\nDiamond v3.12\nDiamond v3.12\n\n\n使用言語\nVerilog HDL\nVerilog HDL\n\n\n書込ケーブル\n\n秋月電子, AE-FT2232\n\n\n\n\na: Verilog HDLの編集とコンパイルまで\nb: Verilog HDLの編集とコンパイル、FPGAへの書き込みまで\n\n\n\n全体の流れ\n\nDiamondのインストール\nライセンス認証\nVerilog HDLファイル (***.v)の作成\n制約ファイル (***.ucf)の作成\n基板との接続\nプログラムの書き込み"
  },
  {
    "objectID": "posts/write_Lattice_FPGA/index.html#diamondのインストール",
    "href": "posts/write_Lattice_FPGA/index.html#diamondのインストール",
    "title": "FPGA (MachXO2) の書き込み",
    "section": "Diamondのインストール",
    "text": "Diamondのインストール\nインストーラは、Lattice Diamond設計ソフトウェアのページからDiamond 3.13 64-bit for WindowsなどOSに合わせてダウンロードします。執筆時のバージョンは3.13。\n\n\n\nLattice Diamondのダウンロードページ"
  },
  {
    "objectID": "posts/write_Lattice_FPGA/index.html#ライセンス認証",
    "href": "posts/write_Lattice_FPGA/index.html#ライセンス認証",
    "title": "FPGA (MachXO2) の書き込み",
    "section": "ライセンス認証",
    "text": "ライセンス認証\nまず、Latticeのウェブサイトのアカウント作成ページでアカウントを作成し、サインインします。\n次に、Lattice Diamond設計ソフトウェアのページでライセンスを取得をクリックしてページを移動します。さらに、‘’Request Diamond Free License’’の項目からRequest Node-locked Licenseを選択します。\n\n\n\nライセンス認証 1\n\n\n\n\n\nライセンス認証 2\n\n\n‘’Host NIC (physical address)’‘の入力欄に、PCの物理アドレス（MACアドレス）を12文字で入力（-や:は消す）。Windowsの場合は、コマンドプロンプトでipconfig/allと入力することで調べられます。’‘I verify that…’’にチェックを入れ、下の方にあるGenerate Licenseをクリックすることで、ライセンスファイルがメールで送られてきます。\nオプションでいくつかのフリーIPのライセンスも取得できるので、必要がある場合は選択します。私の場合は不要だったのでスルーです。\n\n\n\nライセンス認証 3\n\n\nライセンスファイルlicense.datは、インストールフォルダの中の~\\lscc\\diamond\\3.12\\licenseフォルダなどに置いておきます。Diamondの起動時にライセンスファイルのある場所を聞かれるので、答えると環境変数が設定されます。うまくいかない場合には、手動でシステム変数LM_LICENSE_FILEの値にライセンスファイルのパスを設定。\n\n\n\n\n\n\nWarning\n\n\n\nリモートデスクトップでは、正しい手順を踏んでもライセンスが認証されません。現段階では、Lattice Diamondはリモートデスクトップでは使用できないようです。"
  },
  {
    "objectID": "posts/write_Lattice_FPGA/index.html#新規プロジェクトの作成",
    "href": "posts/write_Lattice_FPGA/index.html#新規プロジェクトの作成",
    "title": "FPGA (MachXO2) の書き込み",
    "section": "新規プロジェクトの作成",
    "text": "新規プロジェクトの作成\n\nメニューバーからFile→New→Projectの順に選択するか、スタートページ・ビュー左上部のProjectセクションでNew...を選択。\n指示に従ってデバイス等を選択。プロジェクト生成の際、プロジェクトフォルダは自動生成されないので、あらかじめ作業フォルダを作っておく。\nProjectセクションの入力。\n\nName → プロジェクト名（英数字とアンダースコアのみ可）\nLocation → プロジェクトフォルダの指定\n\nImplementationセクションの入力\n\nName → インプリメンテーション名。デフォルトはimpl1。\n\nソースファイルのインポート。必要なファイル（既存のHDLソースや制約ファイル）を選択する。Copy source to...にチェックを入れておくと、ファイルをプロジェクトフォルダにコピーしてそれをインポートする。ソースファイルのインポートはプロジェクト作成後でも可。\nデバイスの選択。デバイス、スピードグレード、パッケージを選択。プロジェクト作成後でも変更可。\n論理合成ツールの選択。デフォルトはLSE (Lattice Synthesis Engine)。プロジェクト作成後でも変更可。"
  },
  {
    "objectID": "posts/write_Lattice_FPGA/index.html#verilog-hdlファイル-.v-の作成",
    "href": "posts/write_Lattice_FPGA/index.html#verilog-hdlファイル-.v-の作成",
    "title": "FPGA (MachXO2) の書き込み",
    "section": "Verilog HDLファイル (***.v) の作成",
    "text": "Verilog HDLファイル (***.v) の作成\nFile Listタブの中のインプリメンテーションファイル名→Input Filesの中に置かれます。ダブルクリックするとエディタが開きます。"
  },
  {
    "objectID": "posts/write_Lattice_FPGA/index.html#制約ファイル-.lpf-の作成",
    "href": "posts/write_Lattice_FPGA/index.html#制約ファイル-.lpf-の作成",
    "title": "FPGA (MachXO2) の書き込み",
    "section": "制約ファイル (***.lpf) の作成",
    "text": "制約ファイル (***.lpf) の作成\nFile Listタブの中のインプリメンテーションファイル名→LPF Constraint Filesの中に置かれる。ダブルクリックするとテキストエディタが開く。\nLPF制約ファイルは、Spreadsheet ViewのGUIで各種制約を設定することで書き出せます。ユーザーI/O（RTL記述で宣言されたI/O）のピンアサインをする方法は、以下の通り。\n\nポート名に対してピン番号を指定（Port Assignmentsシートで行う）\nピン番号に対してポート名を指定（Pin Assignmentsシートで行う）"
  },
  {
    "objectID": "posts/write_Lattice_FPGA/index.html#基板との接続",
    "href": "posts/write_Lattice_FPGA/index.html#基板との接続",
    "title": "FPGA (MachXO2) の書き込み",
    "section": "基板との接続",
    "text": "基板との接続\n純正のプログラマケーブル (HW-USBN-2B) は高価なので、最低限の機能を秋月電子のUSB-Serial変換モジュールで実現します。\n\n\n\nHW-USBN-2B\n\n\n\n仕様部材\n\n秋月電子, FT2232D USBシリアル2ch変換モジュール\nUSBケーブル（Type A-mini B）\nブレッドボード\nブレッドボード用ジャンパーワイヤー\n\n\n\n\nAE-FT2232\n\n\n\n\n接続\nAE-FT2232のJTAGのピンアサインは以下の通り。\n\n\n\nAE-FT2232ピン名\n接続先JTAG信号名\n\n\n\n\nVCCIOA\nVCC\n\n\nVCCIOB\nVCC\n\n\nAD0\nTCK\n\n\nAD1\nTDI\n\n\nAD2\nTDO\n\n\nAD3\nTMS\n\n\nGND\nGND\n\n\n\n各信号のプルアップ/プルダウンは接続先の開発ボード/デバイスに合わせます。ここでは、接続先の基板においてTCK、TDI、TDO、TMSが10kΩで3.3 Vにプルアップされているとして、変換モジュール回路上では特に変更しません。\nまた、チャンネルAのロジックVCCには接続先の基板の3.3 Vを使用するとして、JP2Aジャンパーを外してVCCIOAに接続先基板のVCC 3.3 Vを繋ぎます。チャンネルBは使用しませんが、同様にJP2Bジャンパーも外してVCCIOBに接続先基板のVCC 3.3 Vに繋いでおきます。\n主電源にはUSBバスパワー5 Vを使用するので、JP1ジャンパーは取り付けたままにします。\n\n\nドライバのインストール\nFTDIのサイトからドライバを入手。VCP Driversを選択して、OSに対応したドライバをダウンロードして流れに沿ってインストールします。\n※ Windows11 x64の場合、2023/1/8時点でのダウンロードファイル名はCDM212364_Setup.zipでした。\nインストールが完了すると、USBケーブルでPCに接続したときに、デバイスマネージャー上で2つのCOMポートが認識されます。\n\n\nDiamondでの設定\nモジュールのデータシートでは、保証されるTTLレベルの通信速度は最大3 Mbps。一方、Diamondの初期設定は6 Mbpsなので、Programmerウィンドウ右側のProgrmmer Speed Setting部、TCK Divider Settingで周波数を変更します。Use custom Clock Dividerをチェックし、Divider値を任意の値に変更することによって、周波数を下げられます。"
  },
  {
    "objectID": "posts/write_Lattice_FPGA/index.html#プログラムの書き込み",
    "href": "posts/write_Lattice_FPGA/index.html#プログラムの書き込み",
    "title": "FPGA (MachXO2) の書き込み",
    "section": "プログラムの書き込み",
    "text": "プログラムの書き込み\n\nコンパイル\n\nProcessタブのExport Filesの下のJEDEC Fileにチェックを入れて、右クリックメニューからRunを実行\nMap Design → Place & Route Design → Export Files の順に実行されて、***.jedファイルが生成される\n\n\n\n生成されたJEDファイルの書き込み\n\nTools → Programmer を開くと、JTAGの接続を聞いてくるので、FTDIのデバイスを選択\nDetect Cable で USB2 - FTUSB-0 (Dual RS232 A Location 0000) の方を選択\nUse custom Clock Divider をチェックし、Divider値を任意の値に設定\n\nUSB-Serial変換モジュールの仕様上は2以上であればOKですが、試してみたら10分周でようやく書き込めました。ブレッドボードとジャンパーケーブルで接続したのが良くなかったかもしれません。\n\nDevice Family Device File Name の項目を正しく設定して、プログラムアイコンをクリックしてコンフィグレーション開始\nStatus が PASS となれば完了"
  },
  {
    "objectID": "posts/website_quartopub/index.html",
    "href": "posts/website_quartopub/index.html",
    "title": "Quartoでウェブサイトを作りQuarto Pubで公開する",
    "section": "",
    "text": "以前、簡単にウェブサイトを作成・公開・維持する方法として、QuartoとGitHub Pagesを使った方法を紹介しました。\nQuartoでウェブサイトを作ってGitHubで公開する\n今回は、Quartoが提供するQuarto Pubで公開する方法も紹介します。GitHubはなぜかGoogle検索にインデックス登録されない状態が続いていたので、全てQuarto Pubに乗り換えてみました。"
  },
  {
    "objectID": "posts/website_quartopub/index.html#quartoとは",
    "href": "posts/website_quartopub/index.html#quartoとは",
    "title": "Quartoでウェブサイトを作りQuarto Pubで公開する",
    "section": "Quartoとは",
    "text": "Quartoとは\nQuartoとは、拡張Markdown形式データ（拡張子は.qmd）を作成し、それを基にpandocによってHTMLファイル、PDFファイルなど様々な形式に変換して文書を構築するアプリケーションです。Jupyter notebookのように、文書内でコードを実行しその結果を表示することもできます。\nQuartoを使ったウェブサイト構築のメリットは以下の通り。\n\nMarkdownで比較的簡単に記述できる。HTMLを編集するのに比べて、更新がだいぶ楽。\nブログ形式のサイトも作成できる。\nテンプレートでもそれなりのデザイン。"
  },
  {
    "objectID": "posts/website_quartopub/index.html#ツールのセットアップ",
    "href": "posts/website_quartopub/index.html#ツールのセットアップ",
    "title": "Quartoでウェブサイトを作りQuarto Pubで公開する",
    "section": "ツールのセットアップ",
    "text": "ツールのセットアップ\n\nQuarto\nQuartoウェブサイトのトップページからGet Startedボタンをクリックしてダウンロードサイトに飛びます。OSに合わせたバージョンをインストールします。\n\n\nVisual Studio Code\nMarkdownの編集に使います。VS Codeウェブサイトからインストールします。VS Codeを立ち上げ、Quartoの拡張機能 (Extentions) でQuartを検索し、インストールします。\nQuartoのダウンロードサイトでも手順を解説しているので参考にしてください。\n\n\nQuarto Pub\nQuarto Pubでアカウントを作成します。Sign Up for Quarto Pubをクリックしてアカウントを作成してください。\n\n公開されるページのURLは、このとき登録したユーザー名と初回Publish時に設定するウェブサイト名を使って\nhttps://&lt;user name&gt;.quarto.pub/&lt;site name&gt;\nとなります。"
  },
  {
    "objectID": "posts/website_quartopub/index.html#ウェブサイトの作成",
    "href": "posts/website_quartopub/index.html#ウェブサイトの作成",
    "title": "Quartoでウェブサイトを作りQuarto Pubで公開する",
    "section": "ウェブサイトの作成",
    "text": "ウェブサイトの作成\n\nテンプレートから作成\nQuartoのウェブサイトテンプレートを使って作成を始めます。\n\nウェブサイト作成用のフォルダを用意します。\nVS Codeを起動してCtrl-Shift-PCtrl-Shift-Pでコマンドパレットを開き、Quarto: Create Projectと入力します。\nWebsite Projectを選択し、1.で作ったフォルダを選択してChoose Project Directoryを押します。\nフォルダの中に、index.qmdや_qualt.ymlといったテンプレートファイル一式が作られます。\n\n\n\nテンプレートの編集\nテンプレートファイルを編集したり、新しいファイルを追加したりしてウェブサイトを作成します。ウェブサイト全体の設定は_quarto.ymlに記述します。初期状態では\nproject:\n  type: website\n\nwebsite:\n  title: \"&lt;website title&gt;\"\n  navbar: #ページナビの設定\n    left: #左詰め\n      - href: index.qmd #1つめのリンク先\n        text: Home #1つ目のリンク先のテキスト（設定しないとリンク先のタイトルが使われる）\n      - about.qmd #2つ目のリンク先\n\nformat:\n  html:\n    theme: cosmo #ページデザイン\n    css: styles.css #CSSファイル（使わないなら消してよい）\n    toc: true #ページ内目次のON/OFF（ページごとの設定も可）\nとなっています。（コメントは筆者の追記）\n詳しい作成方法については、Quatro &gt; Websitesを参照してください。\n\n\nプレビューとレンダリング\nindex.qmdなど作成・編集したファイルを開き、VS Code右上のPreviewボタンをクリックすると、ウェブサイトのプレビューを表示できます。Ctrl-Shift-KCtrl-Shift-Kでも可能です。\n\n全ページをレンダリングする場合は、\n&gt; quarto render\nを実行してください。レンダリングで作成されたファイルはデフォルトでは/docs/フォルダに置かれます。"
  },
  {
    "objectID": "posts/website_quartopub/index.html#ウェブサイトの公開",
    "href": "posts/website_quartopub/index.html#ウェブサイトの公開",
    "title": "Quartoでウェブサイトを作りQuarto Pubで公開する",
    "section": "ウェブサイトの公開",
    "text": "ウェブサイトの公開\n\nQurtoからのPublish\nWebサイト一式をPublishする場合は、Webサイトのホームディレクトリで\n&gt; quarto publish quarto-pub\nを実行するだけです。初回はブラウザが開き認証画面が表示されるので認証してください。\nターミナル上では\n? Authorize (Y/n) » \n? Site name:  » \nと聞かれるので入力してください。認証が終わるとWebサイト一式がレンダリングされます。以上で完了です。GitHubよりもさらに簡単ですね。\n公開されるページのURLはユーザー名とサイト名を使って\nhttps://&lt;user name&gt;.quarto.pub/&lt;site name&gt;\nとなります。&lt;site name&gt;の部分はQuarto Pubの管理ページ内で変更可能です。また、管理ページ内でDefault siteオプションにチェックを入れて保存すると、\nhttps://&lt;user name&gt;.quarto.pub/\nでも同じサイトにアクセスできるようになります。\n\n\nウェブサイトの更新\nウェブサイトのソースファイル（.qmdファイルなど）をVS Codeで編集した際も、\n&gt; quarto publish quarto-pub\nを実行すればOKです。\n更新部分だけをレンダリングしてアップロードする場合には、更新した.qmdファイルをCtrl-Shift-KCtrl-Shift-Kでプレビューし\n&gt; quarto publish quarto-pub --no-render\nを実行することで、追加レンダリングなしでアップロードできます。"
  },
  {
    "objectID": "posts/website_quartopub/index.html#参考",
    "href": "posts/website_quartopub/index.html#参考",
    "title": "Quartoでウェブサイトを作りQuarto Pubで公開する",
    "section": "参考",
    "text": "参考\n\nQuatro &gt; Websites\nQuatro &gt; Publishing &gt; Quarto Pub"
  },
  {
    "objectID": "posts/Sweeper/index.html",
    "href": "posts/Sweeper/index.html",
    "title": "三角波発振器（掃引回路）",
    "section": "",
    "text": "三角波と矩形波を出力する低速発振回路です。 三角波は掃引信号として、矩形波はそのトリガー信号として、さまざまな装置で便利に使用できます。"
  },
  {
    "objectID": "posts/Sweeper/index.html#回路概要",
    "href": "posts/Sweeper/index.html#回路概要",
    "title": "三角波発振器（掃引回路）",
    "section": "回路概要",
    "text": "回路概要\n\n\n\n回路図\n\n\n2回路入りのOPアンプU1を使用し、U1Aをシュミットトリガー回路として、U1Bを積分回路として動作させます。シュミットトリガーから矩形波が出力され、その出力を積分して三角波を作ります。三角波がシュミットトリガーのスレッショルドを超えると、シュミットトリガーの出力電圧が反転します。\n\n発振動作をするための条件は R1 &gt; R2\nR4に比べてR3の値を小さくすると、出力電圧が小さくなる\nR1とR2の値は近い方が良い\nOPアンプはTL082あたりが丁度良い\nR4とR5は矩形波出力の振幅を抑えるための分圧回路（周波数にも影響するので注意）\n\n発振周波数は、以下の式で計算できます。\n\\[\nf=\\frac{1}{4CR_3}\\frac{R_1}{R_2}\\frac{R_5}{R_4+R_5}\n\\]\nここで、RV1の半固定抵抗も含めてR3と考え、R4がR3より十分小さいとする。\nオペアンプには2回路入りで安定なオペアンプを使用するのが良いです。ここでは安価でユニティゲイン安定のTL082を使用しています。"
  },
  {
    "objectID": "posts/simple-digitizer/index.html",
    "href": "posts/simple-digitizer/index.html",
    "title": "小型マイコンボードで作るシンプルなデジタイザ",
    "section": "",
    "text": "BNC入力、USB-C出力の簡易デジタイザです。アナログの電圧信号をPCに取り込んでモニタリングするのに使えます。"
  },
  {
    "objectID": "posts/simple-digitizer/index.html#背景",
    "href": "posts/simple-digitizer/index.html#背景",
    "title": "小型マイコンボードで作るシンプルなデジタイザ",
    "section": "背景",
    "text": "背景\nとある研究で、電圧をモニタリングし、その値を使ってPCで何かしらの制御をしようとしていました。当初はロガーを使えないかなと思っていたのですが、調べてみるとロガーは内部メモリにログを保存するのが仕事で、PCと接続して常時電圧値を転送するみたいな使い方は想定されていないようでした。ならば仕方ない、簡易デジタイザ的なものを自作するかとなったわけです。"
  },
  {
    "objectID": "posts/simple-digitizer/index.html#基本設計",
    "href": "posts/simple-digitizer/index.html#基本設計",
    "title": "小型マイコンボードで作るシンプルなデジタイザ",
    "section": "基本設計",
    "text": "基本設計\n\nちょっと信号をモニタリングしたい場合に使うことを想定してチャンネル数は1とする\n小型のマイコンボードを使い、付属するADCを使って簡単にアナログ信号を取り込む\nアナログ端子はBNCのプラグにし、各装置のBNC出力端子に直接取り付けられるようにする\n\n\n使用部品\n秋月電子で買ってきました。\n\nマイコンボード: Seeduino Xiao (SAMD21)\nアナログコネクタ: BNCプラグ パネルマウント丸座\n\n回路図は以下の通りです。マイコンへの入力部には3.3 Vのツェナーダイオードを入れて保護しています。そのせいで電圧が高くなってくると正しい値からずれますが、気にしないことにします。\n\n\n\n回路図\n\n\n\n\n3Dプリンタ\n筐体は3Dプリンタで作りました。以下の2つのパーツで出来ています。STLファイルを置いておきます。\n\nBNC-Xiao-MiconBoard-side.stl （マイコンマウント側）\nBNC-Xiao-BNC-side.stl （BNC取り付け側）\n\n\n\n\n筐体\n\n\n2つのパーツを固定するのにM2のビットインサートとネジを使います。\n\nM2 ビットインサート（長さ2 mm程度）\nM2 ネジ"
  },
  {
    "objectID": "posts/simple-digitizer/index.html#組み立て",
    "href": "posts/simple-digitizer/index.html#組み立て",
    "title": "小型マイコンボードで作るシンプルなデジタイザ",
    "section": "組み立て",
    "text": "組み立て\n\nGNDピンと10番ピンにケーブルをはんだ付け\n\n\n\n\nケーブルのはんだ付け\n\n\n\nBNC、ツェナダイオードなどをはんだ付け\n\n\n\n\nBNC、ツェナーダイオードなどのはんだ付け\n\n\n\nもう一方の筐体パーツにビットインサートを埋め込む\n\n\n\n\nビットインサートの埋め込み\n\n\n\nはんだ付けした方のパーツを差し込んでねじ止めして完成\n\n\n\n\n完成"
  },
  {
    "objectID": "posts/simple-digitizer/index.html#プログラム書き込み",
    "href": "posts/simple-digitizer/index.html#プログラム書き込み",
    "title": "小型マイコンボードで作るシンプルなデジタイザ",
    "section": "プログラム書き込み",
    "text": "プログラム書き込み\nマイコンに書き込むプログラムはArduino IDEで作りました。コードを以下に示します。\nconst int n_ave = 100;  // 移動平均回数\nconst int in = 10;  // アナログインプット端子\n\nint cnt = 0;  // 移動平均用のカウント値\nfloat temp[n_ave];  // 移動平均用の配列\nfloat v_ave;  // 読み取り電圧値の移動平均 \n\n\nvoid setup() {\n  analogReadResolution(12);\n  Serial.begin(19200);\n}\n\n\nvoid loop() {\n  // --- 移動平均 ---\n  if (cnt == n_ave) {\n    cnt = 0;\n  }\n  temp[cnt] = analogRead(in);\n  v_ave = 0.0;\n  for (int i=0; i&lt;n_ave; i++) {\n    v_ave += temp[i];\n  }\n  v_ave = v_ave/n_ave * (3.3/4095.0);\n  cnt += 1;\n  \n  // --- コマンドの処理 ---\n  if (Serial.available() &gt; 0) {\n    String cmd = Serial.readStringUntil('\\n');\n    \n    // --- FETCH ---\n    if ((cmd == \"FETC?\")||(cmd == \"FETCh?\")) {\n      Serial.println(v_ave, 4);\n    }\n    else {\n      Serial.println(\"\");\n    }\n  }\n}\nポイントは次の通りです。\n\nSAMD21のADCは12bit対応なのでanalogReadResolution(12)で設定\nanalogRead()だけでなく、念のため移動平均をとって出力\nCOMポート経由でPCからFETC?またはFETCh?と送ると電圧値を返す（SPCIコマンドっぽく）"
  },
  {
    "objectID": "posts/simple-digitizer/index.html#実戦投入",
    "href": "posts/simple-digitizer/index.html#実戦投入",
    "title": "小型マイコンボードで作るシンプルなデジタイザ",
    "section": "実戦投入",
    "text": "実戦投入\n早速、実験系に投入しました。光パワーを受光器で測定してモニタリングしています。筐体の中でマイコンボードのLEDが光っているのが見えて、想定外にいい感じです。\n\n\n\n実戦投入"
  },
  {
    "objectID": "posts/simple-digitizer/index.html#reference",
    "href": "posts/simple-digitizer/index.html#reference",
    "title": "小型マイコンボードで作るシンプルなデジタイザ",
    "section": "Reference",
    "text": "Reference\nGitHubリポジトリ"
  },
  {
    "objectID": "posts/regrets/index.html",
    "href": "posts/regrets/index.html",
    "title": "Regrets",
    "section": "",
    "text": "「やらないで後悔するより、やって後悔したほうがいいって言うよね？」という想いを鏡音リンに歌ってもらいました。\n切ない系のアップテンポな曲です。当時の売れ筋路線で作ってみました。研究室で曲を作ろう企画の第3弾です。作詞は第1弾、第2弾に引き続き、研究室の先輩が担当しました。\n\nVocal\n\nRin Kagamine\n\nMusic\n\nSho Okubo\n\nLyrics\n\nMICCHY\n\nLicense"
  },
  {
    "objectID": "posts/regrets/index.html#abstract",
    "href": "posts/regrets/index.html#abstract",
    "title": "Regrets",
    "section": "",
    "text": "「やらないで後悔するより、やって後悔したほうがいいって言うよね？」という想いを鏡音リンに歌ってもらいました。\n切ない系のアップテンポな曲です。当時の売れ筋路線で作ってみました。研究室で曲を作ろう企画の第3弾です。作詞は第1弾、第2弾に引き続き、研究室の先輩が担当しました。\n\nVocal\n\nRin Kagamine\n\nMusic\n\nSho Okubo\n\nLyrics\n\nMICCHY\n\nLicense"
  },
  {
    "objectID": "posts/regrets/index.html#play",
    "href": "posts/regrets/index.html#play",
    "title": "Regrets",
    "section": "Play",
    "text": "Play\n\n\n\n【鏡音リン】 regrets 【オリジナル】"
  },
  {
    "objectID": "posts/regrets/index.html#lyrics",
    "href": "posts/regrets/index.html#lyrics",
    "title": "Regrets",
    "section": "Lyrics",
    "text": "Lyrics\n差し込むひだまりの温かさに 寂しさを感じた\nもう君の影がないことに気づいたからかな？\n君に謝りたいことがたくさんあったけど\n「ごめんね」よりも伝えたいことがあるんだ\n素直に言葉にできなかった ただ「好き」の一言だけ\nお願いだから 一度だけでも奇跡を起こして\n神様なんかいないなんて 子供でも知ってるよね\nでも祈らずにいられないよ 君の顔が浮かぶから\n少しだけでも叶えて\n離れられなくなるなんて 考えてなかったよ\n君を忘れてしまいたいよ 自分が自分でいられないから\n知らなかった雨の冷たさに ぬくもりを感じた\n一緒に差した傘を思い出したからかな？\n君と紡いだ思い出が忘れられないよ\n後悔だけが私に残っているんだ\nもう一度やり直したいよ 必ずうまくいくよね\nお願いだから 一度だけでも奇跡を起こして\n悪魔でもね 構わないよ この願いを叶えて\n忘れることはできないんだ ずっと苦しむしかないんだ\n夢にまで君を見るから\nもう君には会えないんだ それは分かってるんだよ\nどうしようもないこの思いを 今すぐに消して欲しいよ\nずっとこの思いを引きずるの？ そんなの嫌だよ辛いよ\n後悔だけはもうしない 私は変わるから\n神様なんかいないなんて 子供でも知ってるでしょ\nだからもう祈らないよ 君を忘れもしないよ\nそんなことできないから\n「さよなら」をやっと言えるよ ちょっと遅くなったけど\n新しい扉を開くんだ きっとできるから\n君と過ごした思い出を 強さに変えていくんだ"
  },
  {
    "objectID": "posts/limit-breaker/index.html",
    "href": "posts/limit-breaker/index.html",
    "title": "LIMIT BREAKER!!",
    "section": "",
    "text": "「なんでやらない！？」「どうして限界を決める！？」「もっと熱くなれよ！！」そんなな想いを曲にしました。\nJAM Projectのような熱い曲を作ろう！ということで始まった研究室で曲を作ろう企画の第2弾です。研究室の先輩が熱い歌詞を書いてくれました。\n\nVocal\n\nLen Kagamine, Rin Kagamine\n\nMusic\n\nSho Okubo\n\nLyrics\n\nMICCHY\n\nLicense"
  },
  {
    "objectID": "posts/limit-breaker/index.html#abstract",
    "href": "posts/limit-breaker/index.html#abstract",
    "title": "LIMIT BREAKER!!",
    "section": "",
    "text": "「なんでやらない！？」「どうして限界を決める！？」「もっと熱くなれよ！！」そんなな想いを曲にしました。\nJAM Projectのような熱い曲を作ろう！ということで始まった研究室で曲を作ろう企画の第2弾です。研究室の先輩が熱い歌詞を書いてくれました。\n\nVocal\n\nLen Kagamine, Rin Kagamine\n\nMusic\n\nSho Okubo\n\nLyrics\n\nMICCHY\n\nLicense"
  },
  {
    "objectID": "posts/limit-breaker/index.html#play",
    "href": "posts/limit-breaker/index.html#play",
    "title": "LIMIT BREAKER!!",
    "section": "Play",
    "text": "Play\n\n\n【鏡音レン】LIMIT BREAKER !!【オリジナル】"
  },
  {
    "objectID": "posts/limit-breaker/index.html#lyrics",
    "href": "posts/limit-breaker/index.html#lyrics",
    "title": "LIMIT BREAKER!!",
    "section": "Lyrics",
    "text": "Lyrics\n闇を切り裂く閃光が 俺の心を揺さぶる\nスキルを上げろ 神経を研ぎ澄ませ\nそこに答えがあるのさ\n高い壁が立ち塞がっても\n越えて行けるさ 全力なら\n限界超えろ！\nLimit breaker!! 全てを解き放て\nまだ力は残ってるさ だから\nLimit breaker!! 絶対諦めるな\n可能性を信じて そうさ\nLimit breaker!!\n荒野の果てに浮かぶ鏡が 俺の心を映し出す\n力を合わせろ 運命に立ち向かえ\nそこに答えがあるのさ\nノイズの雨に曝されても\n見つけられるさ 輝く明日\n限界超えろ！\nLimit breaker!! 俺たちはまだ\n倒れるわけにはいかない だから\nLimit breaker!! 刹那に賭けろ\n自分を今信じて そうさ\nLimit breaker!!\n異次元の断崖に 身を投じた\n俺たちに 未来（あす）はあるのか？\n俺の全て 燃やし尽くせ！\n限界超えろ！\nLimit breaker!! 全てを解き放て\nまだ力は残ってるさ だから\nLimit breaker!! 絶対諦めるな\n可能性を信じて そうさ\nLimit breaker!!"
  },
  {
    "objectID": "posts/dance-versatileness/index.html",
    "href": "posts/dance-versatileness/index.html",
    "title": "ダンス万能説 -Dance Versatileness-",
    "section": "",
    "text": "踊るときにあれこれ考えるのは大きなミス。感じることが大切だよ。\n研究室で曲を作ろう企画の第5弾です。プロデューサー先輩が初めて歌詞を書いてくれました。\n\n\nVocal\n\nRin Kagamine\n\nMusic\n\nSho Okubo\n\nLyrics\n\n提案型P\n\nLicense"
  },
  {
    "objectID": "posts/dance-versatileness/index.html#abstract",
    "href": "posts/dance-versatileness/index.html#abstract",
    "title": "ダンス万能説 -Dance Versatileness-",
    "section": "",
    "text": "踊るときにあれこれ考えるのは大きなミス。感じることが大切だよ。\n研究室で曲を作ろう企画の第5弾です。プロデューサー先輩が初めて歌詞を書いてくれました。\n\n\nVocal\n\nRin Kagamine\n\nMusic\n\nSho Okubo\n\nLyrics\n\n提案型P\n\nLicense"
  },
  {
    "objectID": "posts/dance-versatileness/index.html#play",
    "href": "posts/dance-versatileness/index.html#play",
    "title": "ダンス万能説 -Dance Versatileness-",
    "section": "Play",
    "text": "Play\n\n\n\n【鏡音リン】ダンス万能説 -Dance Versatileness-【オリジナル】"
  },
  {
    "objectID": "posts/dance-versatileness/index.html#lyrics",
    "href": "posts/dance-versatileness/index.html#lyrics",
    "title": "ダンス万能説 -Dance Versatileness-",
    "section": "Lyrics",
    "text": "Lyrics\n今宵差し込むこの月明かりが\n僕を照らすスポットライト\n静まり返った無機質なオフィスが\n最高の舞台に早変わり\n誰にも見せない本当の姿は\nほかでもないここにあるんだ\n仕事と言う名の鎖が解けたら\nダンスショーの始まりの合図なのさ\nファンの鳴らないPCの隣で\n華麗なタップが鳴り響く\n小さなデスクと\n薄暗いモニターに\n閉じ込められていた\n本当の自分を さあ今解き放つのさ\n鼓動の高まり ビートを感じて\n子供のように自由なステップ\nモノクロのビル その灯りを受けて\n揺らめき映るよ シルエット\n誰も知らない本当の姿は\nほかでもないここにあるんだ\n世界が回るスピンを決めたら\n湧きあがるアンコールに応えるのさ\n音を無くした電話機の隣で\n内なる叫びがこだまする\n月を歩くような\nスリルを感じたら\n僕のダンスを\nこのフロアに世界に刻みつけるのさ\n観客なんてさ 誰もいないけど\n僕は最後まで踊ろう\n空を飛ぶように\n重力を無視して\n僕のダンスを\nこのフロアに世界に刻みつけるのさ\n自分を感じて\n世界にダイブして\n探し求めていた\n真実の愛を さあ今見つけに行こう"
  },
  {
    "objectID": "posts/CircuitPython_KB2040/index.html",
    "href": "posts/CircuitPython_KB2040/index.html",
    "title": "CircuitPythonを使えるようにする（KB2040）",
    "section": "",
    "text": "CircuitPythonを使ってRP2040マイコンボードを動かします。とりあえず、手元にあるKB2040で説明します。"
  },
  {
    "objectID": "posts/CircuitPython_KB2040/index.html#circuitpythonとは",
    "href": "posts/CircuitPython_KB2040/index.html#circuitpythonとは",
    "title": "CircuitPythonを使えるようにする（KB2040）",
    "section": "CircuitPythonとは",
    "text": "CircuitPythonとは\nCircuitPythonはMicroPythonの派生版で、低価格マイクロコントローラでの実験と教育を簡素化するために設計されています。CircuitPythonをインストールしたマイコンボードは、PC上からは CIRCUITPY という名前のUSBドライブとして認識され、その中にあるファイルをコピーして編集するだけでコードを実装できます。"
  },
  {
    "objectID": "posts/CircuitPython_KB2040/index.html#circuitpythonを使えるようにするための手順",
    "href": "posts/CircuitPython_KB2040/index.html#circuitpythonを使えるようにするための手順",
    "title": "CircuitPythonを使えるようにする（KB2040）",
    "section": "CircuitPythonを使えるようにするための手順",
    "text": "CircuitPythonを使えるようにするための手順\n\nCircuitPython環境のインストール\nまず、CircuitPythonのUF2ファイルとライブラリファイル群を入手します。UF2ファイルはマイコンボード毎に用意されているので、使用するマイコンボードのUF2ファイルを手に入れて下さい。ライブラリバンドルは、UF2ファイルのバージョンに対応するものをダウンロードします。\n\nマイコンボード毎のUF2ファイル\n\nKB2040用のUF2ファイル\n\nライブラリバンドル（ZIP）\n\nマイコンボードにCircuitPythonをインストールするために、ブートローダーを立ち上げます。KB2040の場合は、BOOT/BOOTSELボタンを押したままRESETボタンを押します。PC上に RPI-RP2 というドライブが現れるまでBOOT/BOOTSELボタンは押し続けて下さい。\n\n\n\nKB2040\n\n\nRPI-RP2 という新しいディスクドライブが表示されます。その中に先ほどダウンロードしたUF2ファイルをドラッグ&ドロップでコピーします。\n\n\n\nRPI-RP2ドライブ\n\n\nそうすると、RPI-RP2 ドライブが消え、CIRCUITPY という新しいディスクドライブが現れます。これでCircuitPythonのインストール完了です。CIRCUITPY ドライブ直下の code.py ファイルを編集・保存することで、マイコンのコードを書き換えることができます。\n\n\n\nCIRCUITPYドライブ\n\n\n\n\n\ncode.pyを編集する\n\n\n\n\nMu Editorのインストール\ncode.py は CIRCUITPY 上で直接編集することもできますが、最初はシリアルコンソールが内蔵されたMu Editorを使用する方が良いです。Mu EditorはPythonで書かれたシンプルなコードエディタで、Windows、Mac OS、Linux、Raspberry Piで動作します。内臓されたシリアルコンソールでボードのシリアル出力からすぐにフィードバックが得られます。\nMu Editorのインストーラを https://codewith.mu からダウンロードします。DownloadページにはInstructionsへのリンクもあるので、適宜確認しながら進めて下さい。\nMu Editorの初回起動時に、“モード”の選択画面が表示されます。今はCircuitPythonを選択して下さい。現在のモードは、ウィンドウの右下の歯車アイコンの隣に表示されます。モードが “Microbit”などと表示されている場合は、左上のモードボタンをクリックし、表示されるダイアログボックスで”CircuitPython”を選択して下さい。\n\n\n\nMu Editorのモード選択\n\n\nCircuitPythonをインストールしたマイコンボードがCIRCUITPYドライブとして接続されていない場合、Mu Editorはボードを接続するまで編集したコードをどこに保存するかを通知してきます。この警告を避けるには、Mu Editorを起動する前にボードを接続し、CIRCUITPYドライブがマウントされていることを確認して下さい。"
  },
  {
    "objectID": "posts/CircuitPython_KB2040/index.html#circuitpythonコードの編集",
    "href": "posts/CircuitPython_KB2040/index.html#circuitpythonコードの編集",
    "title": "CircuitPythonを使えるようにする（KB2040）",
    "section": "CircuitPythonコードの編集",
    "text": "CircuitPythonコードの編集\n\nCircuitPythonのドキュメント\nCircuitPythonの書き方については、以下を参照してください。\n\nhttps://docs.circuitpython.org/en/latest/docs/\nhttps://learn.adafruit.com/welcome-to-circuitpython\n\n\n\nMu Editorでの編集\nMu Editorの画面は、メニューバー、テキストエディタ、REPLウィンドウ、プロッターウィンドウで構成されています。メニューバーのシリアルアイコンをクリックすると、REPLウィンドウが現れます。EnterキーでREPLモードになり、Ctrl-Dでボードをリセットします。シリアル通信がある場合には、REPLウィンドウに表示されます。プロッターボタンをクリックすると、プロッターが現れます。シリアル通信で数値を受け取ると、プロットしてくれます。テキストエディタでコードを編集し、保存することでマイコンボードがコードをリロードして動き出します。\n\n\n\nMu Editorの画面\n\n\n\n\nテキストエディタでの編集\nちょっとした変更であれば、CIRUITPY ドライブ直下の code.py ファイルをメモ帳などのテキストエディタで開いて編集できます。code.py ファイルを保存すると、マイコンボードがコードをリロードして動き出します。\n\n\nライブラリの使用\nライブラリを使用することで、マイコンボードの多彩な機能を少ない記述で実現できます。最初にダウンロードしたバンドルの中から使用するライブラリをコピーして、CIRCUITPY ドライブの lib フォルダ内に保存することで使えるようになります。ライブラリの詳細は、以下を参照してください。\n\nhttps://learn.adafruit.com/welcome-to-circuitpython/circuitpython-libraries\nhttps://docs.circuitpython.org/projects/bundle/en/latest/"
  },
  {
    "objectID": "posts/CircuitPython_KB2040/index.html#マイコンボードの各端子の名称確認",
    "href": "posts/CircuitPython_KB2040/index.html#マイコンボードの各端子の名称確認",
    "title": "CircuitPythonを使えるようにする（KB2040）",
    "section": "マイコンボードの各端子の名称確認",
    "text": "マイコンボードの各端子の名称確認\nマイコンボードの入出力端子を使用する場合、あらかじめ決められた端子の名前（D1とかA1とか）を使うと分かりやすいです。（たぶん）マイコンボード毎のUF2ファイルで決められているので、それを確認する必要が出てきます。UF2ファイルの中身を確認するのは大変なので、CircuitPythonのセットアップが上手くいっているかの確認も兼ねて、端子の名前を確認する以下のコードを動かしてみます。\n# CircuitPython Essentials Pin Map Script\n\nimport microcontroller\nimport board\n\nboard_pins = []\nfor pin in dir(microcontroller.pin):\n    if isinstance(getattr(microcontroller.pin, pin), microcontroller.Pin):\n        pins = []\n        for alias in dir(board):\n            if getattr(board, alias) is getattr(microcontroller.pin, pin):\n                pins.append(\"board.{}\".format(alias))\n        if len(pins) &gt; 0:\n            board_pins.append(\" \".join(pins))\nfor pins in sorted(board_pins):\n    print(pins)\n以上のコードをcode.pyに記述して保存するとマイコン上でコードが実行され、マイコンから送られてきた端子名称がREPLウィンドウに表示されます。同じ行に並べて表示された名前は、同じ端子に対してどちらの名前も使えることを意味します。各マイコンボードのPinoutと照らし合わせて確認してみて下さい。\n\nKB2040のPinout"
  },
  {
    "objectID": "posts/CircuitPython_KB2040/index.html#参考",
    "href": "posts/CircuitPython_KB2040/index.html#参考",
    "title": "CircuitPythonを使えるようにする（KB2040）",
    "section": "参考",
    "text": "参考\n\nAdafruit KB2040 &gt; CircuitPython\nAdafruit CircuitPython API Reference\nAdafruit CircuitPython Library Bundle"
  },
  {
    "objectID": "posts/2024-03-24/index.html",
    "href": "posts/2024-03-24/index.html",
    "title": "PC制御式LDドライバに物理インターフェイスを付けてみた",
    "section": "",
    "text": "将来的なLDのリモート制御のために、PCで制御するタイプのLDドライバを買ってみました。が、実験室で使うのにいちいちPCと接続しないといけないのは大変なので、ケースに入れてフロントパネルから簡単な操作ができるようにしました。"
  },
  {
    "objectID": "posts/2024-03-24/index.html#概要",
    "href": "posts/2024-03-24/index.html#概要",
    "title": "PC制御式LDドライバに物理インターフェイスを付けてみた",
    "section": "",
    "text": "将来的なLDのリモート制御のために、PCで制御するタイプのLDドライバを買ってみました。が、実験室で使うのにいちいちPCと接続しないといけないのは大変なので、ケースに入れてフロントパネルから簡単な操作ができるようにしました。"
  },
  {
    "objectID": "posts/2024-03-24/index.html#構成",
    "href": "posts/2024-03-24/index.html#構成",
    "title": "PC制御式LDドライバに物理インターフェイスを付けてみた",
    "section": "構成",
    "text": "構成\nケースの中には\n\nリニア電源\nPC制御LDドライバ（基板タイプ, Koheron: CTL-200）\nインターフェース用基板\n\nマイコン（Adafruit: Qt Py SAMD21）\nロータリーエンコーダー\nタクトスイッチ × 2\n\nOLED\n\nが入っています。\n\n\n\nケース内の様子。写真はテスト段階のものなので、まだフロントパネルにスイッチ類がついていません。\n\n\nリアパネルにUSB端子を引き出してあり、PCでの制御も引き続き可能です。が、フロントパネル操作とPC操作の競合については未検証。おそらくですが、致命的なことにはならないと思われます。\n\n電源\n7 V × 2, 15 VAのトロイダルコアトランスで作った+5 V電源を使っています。リニアレギュレータには、可変タイプのLD1085 (最大3 A)を使っています。\n当初、スイッチング電源を使っていたのですが、出力にスイッチング周波数のサイドバンドが発生していることが分かり、大人しくリニア電源を作りました。LDドライバにはスイッチングタイプのACアダプタが付属しているのですが、それで動かしたときはサイドバンドは出ないのだろうか？チャンスがあったらテストしてみようと思います。\n\n\nマイコン\n必要な入出力は多くないので、AdafruitのQt Py SAMD21を使いました。OLEDの動作をArduino IDE経由でしかやったことがなかったため、Arduino環境を優先してRP2040にはしませんでした。\nAdafruitのQt Py SAMD21は秋月で買ったのですが、今はもう在庫限りのようです。マイコンボードは安定供給でないものが多くて、たまにしか作らない自作装置はどうしても1点ものになりがちです。その話はまた別の機会に。\n\n\nLDドライバとの通信\nLDドライバとはUARTで通信しています。\n\n\n\nQt Py\n\nCTL-200\n\n\n\n\nTX\n←→\nRX\n\n\nRX\n←→\nTX\n\n\n\nという具合に、クロスで接続します。Qt Py SAMD21のArduino用ドライバでは、TX, RX端子を使ったシリアル通信にSerial1が割り当てられているようです。（USB端子を使ったシリアル通信にはSerialが割り当てられている。）なので、スケッチには\nSerial1.begin(115200);\nSerial1.setTimeout(3000);\nなどと記述します。\nLDドライバにコマンドを送るための関数を作り、LDの状態を読み取ったり、スイッチやロータリーエンコーダの操作を書き込んだりします。\n// 読み取り\nfloat readCmd(String cmd) {\n  Serial1.println(cmd);\n  delay(5);\n  if (Serial1.available() &gt; 0) {return Serial1.parseFloat();}\n  else {return 0;}\n  while (Serial1.available() &gt; 0) {char t = Serial1.read();} //シリアルバッファのクリア\n}\n\n// 書き込み\nvoid writeCmd(String cmd) {\n  Serial1.println(cmd);\n  delay(5);\n  while (Serial1.available() &gt; 0) {char t = Serial1.read();} //シリアルバッファのクリア\n}\n\n\n操作用インターフェイス\nマイコン操作用のインターフェイスとして、ロータリーエンコーダ1個とタクトスイッチ2個を取り付けました。ロータリーエンコーダは初挑戦でしたが、Arduino用のライブラリをそのまま使ったらすぐできました。また、タクトスイッチのバウンス対策もライブラリのものをそのまま使っています。\n\nデバウンス\n#include &lt;Bounce2.h&gt;\n\n// void setup() 内\n  debSel.attach(D1, INPUT_PULLUP); //オブジェクト\"debSel\"を設定 \n  debSel.interval(10);\n\n// void loop() 内\n  debSel.update();\n  if (debSel.fell()) {\n    statePar++;\n    if (statePar &gt;= 5) {statePar = 0;}\n  }  \n\n\nロータリーエンコーダ\n#include &lt;RotaryEncoder.h&gt;\n\n// void setup() 内\n  // setup the rotary encoder functionality\n  encoder = new RotaryEncoder(rotA, rotB, RotaryEncoder::LatchMode::FOUR3);\n  \n  // register interrupt routine\n  attachInterrupt(digitalPinToInterrupt(rotA), checkPosition, CHANGE);\n  attachInterrupt(digitalPinToInterrupt(rotB), checkPosition, CHANGE);\n\n// void loop() 内\n  encoder-&gt;tick(); // just call tick() to check the state.\n  I_set += I_resolution * (int)(encoder-&gt;getDirection());\nロータリーエンコーダは、割と回転を取りこぼす印象です。エンコーダ自体はALPS ALPINE製で変なメーカーのものではないです。マイコン側のループ速度のせいか、もしくはそもそもエンコーダはこんなものなのかもしれません。とりあえず使用上は問題ありません。\n\n\n\nOLED\nLDのON/OFF、電流値、温度はいつでも見られるようにしたいので、OLEDも取り付けました。I2Cで通信しています。Qt PyにはI2C通信用の信号 (SCL, SDA, VCC, GND) がQwiic端子で出ているので、そこからOLEDに接続します。Qwiic端子の正体はJSTのSHコネクタ（4極）です。秋月でケーブル付きで買えます。\nOLEDを使うには画面表示用のライブラリAdafruit_SSD1306、文字列出力用ライブラリAdafruit_GFXが必要です。加えて、フォントライブラリを使っています。このあたりはネットでいろいろ調べ、ライブラリをコピペしつつ何とか使えるようにしたレベルなので、ちゃんと説明できません。。。\n#include &lt;Adafruit_SSD1306.h&gt;\n#include &lt;Adafruit_GFX.h&gt;\n#include &lt;Fonts/FreeSans24pt7b.h&gt;\n#include &lt;Fonts/FreeSerif9pt7b.h&gt;\n\n\n\n外部入力\n電流と温調には外部変調入力端子を用意し、フィードバック制御できるようしてあります。\n温調は、まず、レベル合わせをした上でマイコンのADCで読み取り、マイコン内で積分してLDドライバの設定温度をデジタル制御する形にしてみたのですが、まだ試験していません。デジタル制御の方が時定数を大きくしやすいのでやってみました。"
  },
  {
    "objectID": "posts/2024-03-24/index.html#外観",
    "href": "posts/2024-03-24/index.html#外観",
    "title": "PC制御式LDドライバに物理インターフェイスを付けてみた",
    "section": "外観",
    "text": "外観\n\nフロントパネルは、なかなかよい感じではないでしょうか。写真の後、テプラでスイッチなどの表示を追加しています。\nファンレスなので、放熱対策にタカチのヒートシンクケースを使ってみましたが、ちょっと大袈裟でした。使ってみて、発熱はさほど気にならないので普通のケースで良かったかもしれません。電源トランス次第ですが、もう少し高さを抑えられたかもしれません。\nタクトスイッチは、一方でモードを選んで、もう一方でON/OFFしたりレンジを切り替えたりといった感じです。数値の操作はロータリーエンコーダで行います。"
  },
  {
    "objectID": "posts/2024-03-24/index.html#まとめ",
    "href": "posts/2024-03-24/index.html#まとめ",
    "title": "PC制御式LDドライバに物理インターフェイスを付けてみた",
    "section": "まとめ",
    "text": "まとめ\nフロントパネルで電流のON/OFFと値の操作をするだけですが、とりあえず今のところちゃんと動いています。正直、インターフェイスを作らなかったら操作が面倒でレーザー自体あまり触っていなかったかもしれません。\n残る宿題は、\n\n付属ACアダプタ使用時のスイッチング雑音の影響を確認\n温調と電流のフィードバック制御を確認\nPC制御とフロントパネル操作の競合の有無を確認\n\nです。"
  },
  {
    "objectID": "posts/2024-03-01/index.html",
    "href": "posts/2024-03-01/index.html",
    "title": "温度コントローラー",
    "section": "",
    "text": "温度コントローラーを作ってみました。 普段は製品を購入していますが、一度自作してみようということで。自作経験があれば、予算不足に陥ったときも怖くない？ペルチェとサーミスタで制御する仕様です。"
  },
  {
    "objectID": "posts/2024-03-01/index.html#概要",
    "href": "posts/2024-03-01/index.html#概要",
    "title": "温度コントローラー",
    "section": "",
    "text": "温度コントローラーを作ってみました。 普段は製品を購入していますが、一度自作してみようということで。自作経験があれば、予算不足に陥ったときも怖くない？ペルチェとサーミスタで制御する仕様です。"
  },
  {
    "objectID": "posts/2024-03-01/index.html#構成",
    "href": "posts/2024-03-01/index.html#構成",
    "title": "温度コントローラー",
    "section": "構成",
    "text": "構成\n温調のコア部分はWavelength ElectronicsのWTC32NDを使用しています。温度調整つまみや外部制御入力を追加し、全体のコントロールにはマイコンボード（Teensy LC）を使用しています。\n\n外部制御入力は基本フィードバック制御にしか使わないので、積分器を通って温度設定電圧に加える形になっています。本当は温度制御のエラー信号を直接置き換えたかったのですが、WTC32NDにそういう入力端子は無いのでこうしています。制御がカスケードになってしまうので、それが問題にならないかどうかは検証する必要があります。積分の時定数を十分遅くしておけば大丈夫なはず。場合によっては、積分はアナログ回路ではなくマイコン上でやるというのも手ですね。その方がいいかもしれません。\n表示ディスプレイは、秋月で買ってきたOLEDのキャラクタディスプレイを使ってみました。128×64のディスプレイでも良かったのですが、ややレトロな蛍光表示管 (VFD) の雰囲気を出したかったので緑色のキャラクタディスプレイにしてみました。\n当初設計から変更したのは電源トランス。在庫があった7 V × 2, 15 VAのトロイダルコアトランスから±5 Vを作ってみたのですが、ペルチェに1 Aも流すと電圧降下を起こしてしまい、しまいにはOLEDが消えてしまいました。ギリギリいけるという計算でしたが、ダメでしたね。おとなしく9 V × 2, 25 VAのトランスに変えて、大丈夫になりました。\n筐体のサイズはThorlabsのTED200Cより横幅が少し大きい程度。ファンレスなので放熱は少し心配。使ってみて様子見です。\nペルチェとサーミスタケーブル用のコネクタも迷いました。本当は普段使っている温度コントローラと同じヒロセのRM12, 6極にしようと考えていたのですが、世界的なコネクタ供給不足で手に入らず（もしくはめちゃくちゃ高く）、仕方なくヒロセのHR10の6極にして、ペルチェには信号とGNDで2極ずつ使うという形にしました。"
  },
  {
    "objectID": "posts/2024-03-01/index.html#その他",
    "href": "posts/2024-03-01/index.html#その他",
    "title": "温度コントローラー",
    "section": "その他",
    "text": "その他\nそういえばいつも買っている温度コントローラも、RM12の6極が手に入らなかったのかRM12の7極になっていました。これまでの製品とケーブルの互換性がなくなっとるやないか！"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to PureHertz Laboratory",
    "section": "",
    "text": "Magic of Frequency —Optics, Electronics, and Music\n\nレーザー物理の研究のために開発・製作した周辺回路・装置\n趣味で制作した楽曲\nその他、研究・趣味に役立つかもしれない情報\n\n\n\n\nContents\n\nAbout\n\n当サイトについて\n\nWorks\n\n開発、製作、制作した回路、装置、楽曲やその周辺の情報をBlog形式で綴っています。\n記事がたまってきたら、内容ごとにまとめようかと思っています。\n\n\n\n\nRecent posts\n\n\n\n\n\nTitle\n\n\nDate\n\n\nModified\n\n\n\n\n\n\ntinySA UltraのPC制御\n\n\n2025-01-25\n\n\n2025-01-25\n\n\n\n\n小型マイコンボードで作るシンプルなデジタイザ\n\n\n2024-08-18\n\n\n2024-08-30\n\n\n\n\nQuartoでウェブサイトを作りQuarto Pubで公開する\n\n\n2024-07-15\n\n\n2024-07-15\n\n\n\n\nCircuitPythonを使えるようにする（KB2040）\n\n\n2024-07-08\n\n\n2024-07-08\n\n\n\n\nPythonの環境構築\n\n\n2024-06-29\n\n\n2024-06-29\n\n\n\n\nFPGA (MachXO2) の書き込み\n\n\n2024-04-28\n\n\n2024-06-29\n\n\n\n\nYou Go, We Go\n\n\n2024-04-12\n\n\n2024-04-12\n\n\n\n\nPC制御式LDドライバに物理インターフェイスを付けてみた\n\n\n2024-03-24\n\n\n2024-03-24\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "PureHertz",
    "section": "",
    "text": "本職: レーザー物理の研究者\n学位: 博士（理学）"
  },
  {
    "objectID": "about.html#プロフィール",
    "href": "about.html#プロフィール",
    "title": "PureHertz",
    "section": "",
    "text": "本職: レーザー物理の研究者\n学位: 博士（理学）"
  },
  {
    "objectID": "about.html#このサイトについて",
    "href": "about.html#このサイトについて",
    "title": "PureHertz",
    "section": "このサイトについて",
    "text": "このサイトについて\n大学学部時代からレーザー物理分野で研究をしています。研究の過程でいろいろな回路や装置を作るうちに、回路作りが趣味になり、必要以上に(?)こだわるようになりました。作った装置には “PureHertz” というブランド名を勝手につけて自己満足しています。\n一方、中学生の頃から作曲・音楽制作を趣味にしており、最近は研究内容をテーマにして曲を作っています。\nせっかく作った作品たち、紹介できるものはこのサイトで紹介していこうと思います。"
  },
  {
    "objectID": "about.html#その他の楽曲置き場",
    "href": "about.html#その他の楽曲置き場",
    "title": "PureHertz",
    "section": "その他の楽曲置き場",
    "text": "その他の楽曲置き場\n\nPiapro\nニコニコ動画 / NicoNico"
  },
  {
    "objectID": "posts/2024-02-27/index.html",
    "href": "posts/2024-02-27/index.html",
    "title": "低雑音アンプ用の電源の中身を見てみる",
    "section": "",
    "text": "某メーカーの低雑音アンプ用電源の中を覗いてみました。\n\n意外にも、電源トランスは普通のOIコア。磁場漏洩が少ないと言われているトロイダルコアとかRコアとかではなかったです。その代わりに巻いてあるのは、銅のショートリングですかね。コイルから出た磁束によってショートリングに渦電流が発生し、その電流がコイルを一周するように流れることで発生する磁束でコイルから出る磁束を打ち消して低減するらしいです。\nトランスと回路を離してあって、さらに回路が内箱に収められているのも、漏洩磁場を気にしてでしょうか。内箱の素材はアルミのように思いましたが、50 Hzや60 Hzに対しても十分な磁気シールドになるのでしょうか？回路を追うのは難しかったので、結局分からないところばかりでした。\nメーカーが測定した電圧雑音スペクトルでは、低周波側ではハムノイズがほとんど見えていないですし、高周波側は1 nV/Hz1/2を下回るほど相当に低いので、何か特別なことをやっているに違いない・・・。\nしかし、このクラスの低雑音がRFアンプに必須かどうかは、確認してみないと何とも言えない気もします。±15 V, 100 mAの電源にしては結構なお値段なので、安価な市販電源や自作電源で十分ならそれで済ませたいところではあります。"
  },
  {
    "objectID": "posts/2024-03-02/index.html",
    "href": "posts/2024-03-02/index.html",
    "title": "共振器コントローラー",
    "section": "",
    "text": "ファブリペロー共振器コントローラーです。 共振器共鳴周波数をレーザー周波数に安定化するのに使えます。 オートリロック機能付きで、共振器周りでうるさい作業をしてもロックが外れません。"
  },
  {
    "objectID": "posts/2024-03-02/index.html#概要",
    "href": "posts/2024-03-02/index.html#概要",
    "title": "共振器コントローラー",
    "section": "",
    "text": "ファブリペロー共振器コントローラーです。 共振器共鳴周波数をレーザー周波数に安定化するのに使えます。 オートリロック機能付きで、共振器周りでうるさい作業をしてもロックが外れません。"
  },
  {
    "objectID": "posts/2024-03-02/index.html#構成",
    "href": "posts/2024-03-02/index.html#構成",
    "title": "共振器コントローラー",
    "section": "構成",
    "text": "構成\nエラー信号を入力して共振器をPI制御します。共振器の2枚のミラーのうち、片方はストロークの大きいPZTで、もう片方はストロークは小さいが高速なPZTで制御することを前提としています。小さいPZTはオペアンプで直接駆動、大きいPZTは組み込みタイプのPZTドライバー（メステック製 M-2691, 最大150 V）を駆動します。\n筐体の中には\n\nPI制御回路\nリロック用マイコン回路\n掃引回路\nトロイダルコアトランス電源\nPZTドライバ\n\nを詰め込んでいます。\n\nフロントパネルはアナログメータが場所をとって混み合ってしまいました。アナログメータはPZTドライバー出力電圧のモニタリング用です。操作系とオシロスコープ用信号の出力端子をフロントパネルに持ってきて、エラー信号の入力端子やPZTへの出力端子はリアパネルです。"
  },
  {
    "objectID": "posts/2024-03-02/index.html#その他",
    "href": "posts/2024-03-02/index.html#その他",
    "title": "共振器コントローラー",
    "section": "その他",
    "text": "その他\n機能ごとに基板が分かれてしまっているので、それらを繋ぐ配線がごちゃごちゃしてしまいます。配線作業も時間がかかるので何かもう一工夫したいところ。"
  },
  {
    "objectID": "posts/colour-of-the-universe/index.html",
    "href": "posts/colour-of-the-universe/index.html",
    "title": "Colour of the Universe",
    "section": "",
    "text": "天体が放つ光のドップラーシフトを利用した天体視線速度測定は、太陽型恒星の周りを公転する系外惑星が初めて発見された際に用いられた手法である。さらに精度を高めることで、地球型系外惑星発見、宇宙加速膨張の直接的実証、基礎物理定数の恒常性検証が可能になると期待されている。\nそして現在、光の波長の超高精度な「ものさし」である【光コム】を基準とした、究極的精度の視線速度測定を目指す研究が進められている…\n\nVocal\n\nMiku Hatsune\n\nMusic & Lyrics\n\nSho Okubo\n\nLicense"
  },
  {
    "objectID": "posts/colour-of-the-universe/index.html#abstract",
    "href": "posts/colour-of-the-universe/index.html#abstract",
    "title": "Colour of the Universe",
    "section": "",
    "text": "天体が放つ光のドップラーシフトを利用した天体視線速度測定は、太陽型恒星の周りを公転する系外惑星が初めて発見された際に用いられた手法である。さらに精度を高めることで、地球型系外惑星発見、宇宙加速膨張の直接的実証、基礎物理定数の恒常性検証が可能になると期待されている。\nそして現在、光の波長の超高精度な「ものさし」である【光コム】を基準とした、究極的精度の視線速度測定を目指す研究が進められている…\n\nVocal\n\nMiku Hatsune\n\nMusic & Lyrics\n\nSho Okubo\n\nLicense"
  },
  {
    "objectID": "posts/colour-of-the-universe/index.html#play",
    "href": "posts/colour-of-the-universe/index.html#play",
    "title": "Colour of the Universe",
    "section": "Play",
    "text": "Play\n\n\n\nColour of the Universe / 初音ミク"
  },
  {
    "objectID": "posts/colour-of-the-universe/index.html#lyrics",
    "href": "posts/colour-of-the-universe/index.html#lyrics",
    "title": "Colour of the Universe",
    "section": "Lyrics",
    "text": "Lyrics\nCan you hear it?\n宇宙 [そら] の彼方から届くメッセージ\nCan you see it?\n星の鼓動が彩る1ページ\n近づくほどに青く 静かに燃える情熱\n遠ざかるほどに赤く 逢いたいと願う微熱\n100億光年の孤独に 終わりを告げる時が来る\n混ざりあう全ての色から 答えを掬い上げるのさ\nColour of the universe\nCan you feel it?\n加速するほどに広がり続ける世界\nCan you believe it?\n本当の形はまだ誰も見たことがない\nおどけ顔の君が残した 奇妙な置き土産\nその意味を探すように 今夜も空を見上げ\n100億光年の孤独に 終わりを告げるとき時が来る\n混ざりあう全ての色から 答えを掬い上げるのさ\nColour of the universe\n決して辿り着けない 遥かなる星雲\nそれでもここから見つけ出せる New horizons\n呼ぶ声に導かれて 踏み出す闇の向こう側\n虹色の瞳で 見つめる先は\nColour of the universe\nA light in the black night\n答えは遠くない もう怖くない\nLike a rainbow in the dark\nこの胸に抱く まだ見ぬ地平を\nWe can resolve the spectre from the space\nSearching for the new horizons from this place\nThat’s why we’re here\n降り注ぐ光を集めて\nIt will be near\n混ざりあう全ての色から\n君の印をきっと見つけ出すのさ\nColour of the universe\nThat’s how we’ll shine"
  },
  {
    "objectID": "posts/colour-of-the-universe/index.html#references",
    "href": "posts/colour-of-the-universe/index.html#references",
    "title": "Colour of the Universe",
    "section": "References",
    "text": "References\n\nhttps://doi.org/10.1364/OE.487279"
  },
  {
    "objectID": "posts/goodbye-to-my-days/index.html",
    "href": "posts/goodbye-to-my-days/index.html",
    "title": "Goodbye to My Days",
    "section": "",
    "text": "修士時代、田舎に帰ってしまった同期の友人の心情を想像して作った曲。\n歌詞の「ゆっくり生きたいんだ」は、直接は聞いていないのですが実際に友人が口にしていたらしく、とても印象に残ったので使わせてもらいました。私の願望も込みで、最後は希望が残るような終わり方にしています。\n\nVocal\n\nLen Kagamine\n\nMusic & Lyrics\n\nSho Okubo\n\nLicense"
  },
  {
    "objectID": "posts/goodbye-to-my-days/index.html#abstract",
    "href": "posts/goodbye-to-my-days/index.html#abstract",
    "title": "Goodbye to My Days",
    "section": "",
    "text": "修士時代、田舎に帰ってしまった同期の友人の心情を想像して作った曲。\n歌詞の「ゆっくり生きたいんだ」は、直接は聞いていないのですが実際に友人が口にしていたらしく、とても印象に残ったので使わせてもらいました。私の願望も込みで、最後は希望が残るような終わり方にしています。\n\nVocal\n\nLen Kagamine\n\nMusic & Lyrics\n\nSho Okubo\n\nLicense"
  },
  {
    "objectID": "posts/goodbye-to-my-days/index.html#play",
    "href": "posts/goodbye-to-my-days/index.html#play",
    "title": "Goodbye to My Days",
    "section": "Play",
    "text": "Play\n\n\n\n【鏡音レン】Goodbye to My Days【オリジナル】"
  },
  {
    "objectID": "posts/goodbye-to-my-days/index.html#lyrics",
    "href": "posts/goodbye-to-my-days/index.html#lyrics",
    "title": "Goodbye to My Days",
    "section": "Lyrics",
    "text": "Lyrics\n降り止まない雨 湿った壁の臭い\nモニターの光に 力なく揺れる影\nそこは夢の世界 望むものは何でも手に入る\n代わりに差し出したのは 今と未来\n明るく振る舞っても 夜が孤独になるだけ\n暗闇に浮かぶのは 見たくないものばかり\n僕のこの不安に 大した理由なんてないだろう\nでも確かにつらいんだ Ah…\nGoodbye to my days\nGoodbye to my friends\nゆっくり生きたいんだ\nGoodbye to my dreams and what I believe in\n全てを失ったとしても\n遠く聞こえる声が 夢の終わりを告げる\n声を上げ嘆いても 現実は何も変わらない\n僕のこの人生に これからも意味なんてないだろう\nだからもう逃げ出すんだ Ah…\nGoodbye to my days\nGoodbye to my friends\nゆっくり生きたいんだ\nGoodbye to my dreams and what I believe in\n全てを失ったとしても\n雨はもう上がった 風の匂いも柔らか\n何もない僕だけど まだ一人で立っている\nこれは終わりなのか それとも始まったばかりなのか\n答えはいつか出るのだろう Uh…\nGoodbye to my days\nGoodbye to my friends\nゆっくり生きたいんだ\nGoodbye to my dreams and what I believe in\n全てを失ったとしても\nGoodbye to my days\nGoodbye to my friends\nゆっくり生きたいんだ\nGoodbye to my dreams\nGoodbye to my love\nゆっくり ゆっくり 生きたいんだ\nゆっくり ゆっくり 答えはいつの日にか\nSomeday…"
  },
  {
    "objectID": "posts/Python_setup/index.html",
    "href": "posts/Python_setup/index.html",
    "title": "Pythonの環境構築",
    "section": "",
    "text": "Pythonを始めた当初はAnacondaを使って環境構築していましたが、更新が上手くいかなくなったりとよく分からない状態になっていたので、python.org経由の標準的な方法で環境を構築しなおしました。以下、その備忘録です。"
  },
  {
    "objectID": "posts/Python_setup/index.html#インストール",
    "href": "posts/Python_setup/index.html#インストール",
    "title": "Pythonの環境構築",
    "section": "インストール",
    "text": "インストール\n公式サイト https://www.python.org/ から最新版のインストーラをダウンロードしてインストールします。インストール時に Add Python 3.x to PATH にチェックを入れることで、自動的に環境変数にインストールディレクトリが追加され、ターミナルから python だけで直接呼び出せるようになります。\n通常は Install Now を選択してインストールを開始します。インストールするディレクトリを変更するなど、様々なオプションを選ぶときはCostumize installationを選択します。\nインストールが完了したら、ターミナルから\n&gt; python -V\nを実行し、パスが通っていることとバージョンを確認します。また、インストール先ディレクトリは環境変数 PATH から確認できます。"
  },
  {
    "objectID": "posts/Python_setup/index.html#pythonのアップデート",
    "href": "posts/Python_setup/index.html#pythonのアップデート",
    "title": "Pythonの環境構築",
    "section": "Pythonのアップデート",
    "text": "Pythonのアップデート\nhttps://www.python.org/ から最新版のインストーラをダウンロードして実行すれば、インストールされているPythonをアップデートできます。\n\n\n\nPythonのアップデート"
  },
  {
    "objectID": "posts/Python_setup/index.html#pipのアップデート",
    "href": "posts/Python_setup/index.html#pipのアップデート",
    "title": "Pythonの環境構築",
    "section": "pipのアップデート",
    "text": "pipのアップデート\nPythonのサードパーティーパッケージは PyPI で配布されています。これを管理・インストールするためのツールがpipで、アップデートして最新版に更新しておきます。\n&gt; python -m pip install --upgrade pip\n一度実行すると、次回以降は\n&gt; pip install --upgrade pip\nでOKです。パッケージ “xyz” をインストールする場合は\n&gt; pip install xyz\nを実行します。"
  },
  {
    "objectID": "posts/Python_setup/index.html#spyderのインストール",
    "href": "posts/Python_setup/index.html#spyderのインストール",
    "title": "Pythonの環境構築",
    "section": "Spyderのインストール",
    "text": "Spyderのインストール\nPythonのエディタには Spyder を使用しています。https://www.spyder-ide.org/ からインストーラをダウンロードして実行します。\nSpyderは、自身にPythonパッケージが含まれているために別のPythonをインストールしなくても使えますが、先ほど上でインストールしたPythonを使う方がバージョンやパッケージの管理が楽だと思います。別にインストールしたPythonをSpyderで使うには、上部のメニューバーからツール → 設定 と進み、「以下のPythonインタープリターを使う」を選択した後でPython環境があるディレクトリのPython.exeを選択します。\n\n\n\nSpyderで使用するPythonの変更\n\n\n設定を反映するためにSpyderを再起動すると、以下のようなエラーが表示されます。\n\n\n\nSpyderのモジュール不足によるエラー\n\n\nこれは、指定したPython環境にSpyderの実行に必要なモジュールが足りていないためで、\n&gt; pip install spyder-kernels\n\n&gt; pip install PyQt5\nを実行してそれらをインストールします。改めてSpyderを再起動し、エラーが消えていることを確認して下さい。"
  },
  {
    "objectID": "posts/RS232C_USB/index.html",
    "href": "posts/RS232C_USB/index.html",
    "title": "RS232C-USB変換",
    "section": "",
    "text": "RS232CをUSBに変換し、RS232C対応の装置とPCの間で通信するための手順のメモです。PC側では変換ケーブル（変換用IC）が仮装COMポートとして認識されます。"
  },
  {
    "objectID": "posts/RS232C_USB/index.html#rs232cとは",
    "href": "posts/RS232C_USB/index.html#rs232cとは",
    "title": "RS232C-USB変換",
    "section": "RS232Cとは",
    "text": "RS232Cとは\nRS-232C (Recommended Standard 232 version C) とは、電子機器間でシリアル通信を行うための接続規格のひとつです。コンピュータのシリアルポートと周辺機器（プリンター、モデム、スキャナーなど）を接続する仕様として、かつては広く普及していた・・・とのことですが、RS232C搭載の実験装置はまだまだ現役で使われています。\nPC側に装置毎の特別なドライバが不要なので、割と手堅い通信手段だと思います。"
  },
  {
    "objectID": "posts/RS232C_USB/index.html#使用ケーブル",
    "href": "posts/RS232C_USB/index.html#使用ケーブル",
    "title": "RS232C-USB変換",
    "section": "使用ケーブル",
    "text": "使用ケーブル\nRS232C(D-sub 9ピン)-USB変換ケーブルを使用します。FTDI製のチップを使用したものが一般的です。いろいろなところから購入出来ます。\n\nRSオンライン\nモノタロウ\n秋月電子\n\n（2024/03/17 確認）\n\n\n\n秋月電子のRS232C-USB変換ケーブル"
  },
  {
    "objectID": "posts/RS232C_USB/index.html#ドライバのインストール",
    "href": "posts/RS232C_USB/index.html#ドライバのインストール",
    "title": "RS232C-USB変換",
    "section": "ドライバのインストール",
    "text": "ドライバのインストール\nFTDIのチップを使用している場合のドライバのインストール手順は以下の通り。\n\nFTDI公式サイトからインストーラをダウンロードする方法\nFTDIのウェブサイト &gt; Drivers &gt; VCP-drivers からOSに合わせたドライバを選択します。\nWindowsの場合は、下図の赤丸を付けたリンクからインストーラをダウンロードして実行します。インストール後は再起動が必要なようです。\n\n\n\n（2024/03/17 確認）\n\n\n\n\nその他のインストール方法\n各装置の制御ソフトウェア等をインストールする際に、一緒にインストールされることがあります。とりあえず、Arduino IDEを入れるのが手っ取り早かったです。\nRS232C-USB変換ケーブルにインストール用CDが付属している場合は、それでもインストールできます。"
  },
  {
    "objectID": "posts/RS232C_USB/index.html#通信の確認",
    "href": "posts/RS232C_USB/index.html#通信の確認",
    "title": "RS232C-USB変換",
    "section": "通信の確認",
    "text": "通信の確認\nTera Termなどのターミナルソフトを使ってシリアル通信を確認できます。"
  },
  {
    "objectID": "posts/SlowPD/index.html",
    "href": "posts/SlowPD/index.html",
    "title": "低速受光器",
    "section": "",
    "text": "CWレーザー分光やレーザーパワーモニターなどに使用する低速受光器です。"
  },
  {
    "objectID": "posts/SlowPD/index.html#回路概要",
    "href": "posts/SlowPD/index.html#回路概要",
    "title": "低速受光器",
    "section": "回路概要",
    "text": "回路概要\nDC測定用ですが、数10 kHz程度の帯域はあるので光チョッパーにも対応できます。適切に部品を選べば、適当な市販受光器よりも高性能が実現できます。\n回路図は下記の通りです。ごく普通のトランスインピーダンスアンプです。実際にはIC3のボルテージフォロワは実装せず、IC4の出力から直接R6を介してSMAコネクタに接続しています。\n\n\nフォトダイオード: InGaAs (Hamamatsu, G12180)\nオペアンプ: LMP7701\nトランスインピーダンス: 10 kΩ\n電源コネクタ: M8コネクタ 3極\n\nトランスインピーダンスアンプには、入力バイアス電流の小さなFET入力のオペアンプを使用するのが定石です。今回は入力オフセット電圧も小さなLMP7701を使用し、低オフセットを実現しています。\nフィードバック抵抗には、温度ドリフトの小さなアルファエレクトロニクス製の抵抗を使用しています。交換して電流電圧変換係数を変えられるようになっています。\n電源コネクタは、NewportやThorlabsと共通のM8コネクタです。同じ電源を使用できます。"
  },
  {
    "objectID": "posts/tinySA_pc-control/index.html",
    "href": "posts/tinySA_pc-control/index.html",
    "title": "tinySA UltraのPC制御",
    "section": "",
    "text": "少し前に話題になった手のひらサイズの格安スペアナtinySA1。 懇意にしているメーカーの方が使っているのを見せていただき、自分も欲しくなって手に入れました。\n我々の研究では、それなりに高性能なスペアナが必要となる測定とは別に、適当な性能のスペアナで十分な用途（位相同期のモニタなど）も多く、そういった用途にちょうど良いのではないかと思います。 特に、遠隔地に置く装置の位相同期モニタにはいろいろ事務的な面でも都合がよいだろうと思っています。\nここでは、tinySAのPC制御法について簡単にまとめます。"
  },
  {
    "objectID": "posts/tinySA_pc-control/index.html#tinysa概要",
    "href": "posts/tinySA_pc-control/index.html#tinysa概要",
    "title": "tinySA UltraのPC制御",
    "section": "tinySA概要",
    "text": "tinySA概要\ntinySA Ultraの仕様は以下の通り。\n\nサイズ: 74 mm x 123 mm x 23 mm\n周波数範囲: 100 kHz-800 MHz, (Ultra mode 6 GHz)\nRBW: 200 Hz-850 kHz\nディスプレイ: 4 inch TFT (480x320)\nUSBインターフェイス: USB type-C\nカードスロット: microSD\nオーディオ出力: 3.5 mmプラグ端子\n電源: USB 5V, バッテリ（2時間）\n\n詳細情報は公式サイトを参照してください。\n\n\n\ntinySA パッケージ\n\n\n\n\n\ntinySA 開封\n\n\n\n\n\ntinySA ビート信号"
  },
  {
    "objectID": "posts/tinySA_pc-control/index.html#pcとの接続",
    "href": "posts/tinySA_pc-control/index.html#pcとの接続",
    "title": "tinySA UltraのPC制御",
    "section": "PCとの接続",
    "text": "PCとの接続\n\ntinySA側の設定\nメニューを開いて [CONFIG] &gt; [MORE] &gt; [CONNECTION] で設定可能。\n\n[USB]を選択\n[SERIAL SPEED]でbaud rateを設定（初期設定は115200）\n\n\n\nホスト側の設定\ntinySAをPCにUSB接続すると、シリアルポートとして認識される。 COM番号を確認してシリアルポート（のbaud rate）を設定する。"
  },
  {
    "objectID": "posts/tinySA_pc-control/index.html#tinysaのコマンド制御",
    "href": "posts/tinySA_pc-control/index.html#tinysaのコマンド制御",
    "title": "tinySA UltraのPC制御",
    "section": "tinySAのコマンド制御",
    "text": "tinySAのコマンド制御\ntinySAの制御コマンドは公式サイトを参照してください。\n\ntinySA USB interface\n\n通信時の注意点は以下の通り。\n\ntinySAとの書き込み/読み取りは、終端文字LF (\\r\\n)\n複数行にわたる場合は、各行末に終端文字を持つ\n\n以下、代表的なコマンドの解説です。\n\nrbw\nRBWを設定します。\n\n使用法:\nrbw {value}\\r\\n\n{value}: RBWの値。autoか3-600の数値（kHz単位）を入力\n応答: 入力と同じコマンド\n\n\n\nresume\ntinySAの掃引を再開します。\n\n使用法:\nresume\\r\\n\n応答: 入力と同じコマンド\n\n\n\nfrequencies\n最後の掃引で使った周波数軸の値を出力します。\n\n使用法:\nfrequencies\\r\\n\n応答:\nfrequencies\\r\\n\nf[0]\\r\\n\nf[1]\\r\\n\nf[2]\\r\\n\n...\nch&gt;\n\nf[n]: 周波数配列 （Hz単位）\n最終行のch&gt;の後ろには終端文字がない\n\n\n\n\nscanraw\n掃引を実行し、バイナリデータを出力します。後述するscanのようにデータ転送の失敗がなく、hopのように遅くないので、PCでのデータ取得には最も適しています。\n\n\n\nscanrawで取得した30 MHz校正用信号のスペクトル\n\n\n\n使用法:\nscanraw {start(Hz)} {stop(Hz)} [points] [option]\\r\\n\n\n{start(Hz)}: 開始周波数（Hz単位）。500k, 10Mなど接頭辞も使える。\n{stop(Hz)}: 停止周波数（Hz単位）\n[points]: データ点数\n[option]: 出力データに合わせて以下の和を入力する。1: buffered, 2: continuous。今のところ効果がよく分からず、0にしている。\n\n応答例:\nscanraw {start(Hz)} {stop(Hz)} [points] 0\\r\\n\n{x[MSB0][LSB0]x[MSB1][LSB1]x[MSB2][LSB2]...}ch&gt;\n\n出力データ文字列は{}で囲まれており、その後ch&gt;で終わる\ncn&gt;で終わった後には終端文字がない\n{}の中の各データ点はx[MSBn][LSBn]の繰り返しで表される\n\n[MSBn]: n番目データの最上位ビット\n[LSBn]: n番目データの最下位ビット\nxを区切り文字にして2 byteのデータをリトルエディアン形式で表現している\n\n\n2 byteデータを整数で表示したものをdとすると、測定値y（dBm単位）は以下のように計算できる\ny = d/32 - 128  # for tinySA\ny = d/32 - 172  # for tinySA Ultra\n\n\n\nscan\n掃引を実行し、オプションで測定データを出力します。\n\n使用法:\nscan {start(Hz)} {stop(Hz)} [points] [outmask]\\r\\n\n\n{start(Hz)}: 開始周波数（Hz単位）。500k, 10Mなど接頭辞も使える。\n{stop(Hz)}: 停止周波数（Hz単位）\n[points]: データ点数（Ultraの場合、最大450）\n[outmask]: 出力したいデータに合わせて以下の和を入力する。1: 周波数, 2: 測定値, 4: 保存値。周波数と測定値の場合は3。\n\n応答例:\nscan {start(Hz)} {stop(Hz)} [points] 3\\r\\n\nf[0] y[0] 0.000000000\\r\\n\nf[1] y[1] 0.000000000\\r\\n\nf[2] y[2] 0.000000000\\r\\n\n...\nch&gt;\n\nf[n]: 周波数配列（Hz単位）\ny[n]: 測定値配列（dBm単位）\nなぜかy[n]の隣に0.000000000が並ぶ。理由不明。\n最終行のch&gt;の後ろには終端文字がない\n\n\nscanでデータを取得すると、下図のように取得に失敗するデータ点があるので、PCでのデータ取得には使えません。\n\n\n\nscanで取得した30 MHz校正用信号のスペクトル\n\n\n\n\nhop (Ultraのみ)\n設定した周波数における信号レベルを測定し、出力します。scanの上位版と思えば良いです。ただし、scan, scanrawに比べて読み出しの時間がかかります。\n\n使用法:\nhop {start(Hz)} {stop(Hz)} {step(Hz) | points} [outmask]\\r\\n\n\n{start(Hz)}: 開始周波数（Hz単位）。500k, 10Mなど接頭辞も使える。\n{stop(Hz)}: 停止周波数（Hz単位）\n{step(HZ) | points}: ステップ周波数（Hz単位）またはデータ点数を入力。数値が450以下の場合はデータ点数と認識され、450を超えるとステップ周波数と認識される。\n[outmask]: 出力したいデータに合わせて以下の和を入力する。1: 周波数, 2: 測定値。\n\n応答例:\nhop {start(Hz)} {stop(Hz)} 450 3\\r\\n\nf[0] y[0]\\r\\n\nf[1] y[1]\\r\\n\nf[2] y[2]\\r\\n\n...\nch&gt;\n\nf[n]: 周波数配列（Hz単位）\ny[n]: 測定値配列（dBm単位）\n最終行のch&gt;の後ろには終端文字がない"
  },
  {
    "objectID": "posts/tinySA_pc-control/index.html#tinysaのlabview-vi",
    "href": "posts/tinySA_pc-control/index.html#tinysaのlabview-vi",
    "title": "tinySA UltraのPC制御",
    "section": "tinySAのLabVIEW VI",
    "text": "tinySAのLabVIEW VI\n鋭意制作中…"
  },
  {
    "objectID": "posts/tinySA_pc-control/index.html#参考資料",
    "href": "posts/tinySA_pc-control/index.html#参考資料",
    "title": "tinySA UltraのPC制御",
    "section": "参考資料",
    "text": "参考資料\n\ntinySA USB interface\ntinySA用のPythonライブラリ"
  },
  {
    "objectID": "posts/tinySA_pc-control/index.html#footnotes",
    "href": "posts/tinySA_pc-control/index.html#footnotes",
    "title": "tinySA UltraのPC制御",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n話題になったのはnanoVNAの方かも↩︎"
  },
  {
    "objectID": "posts/website_quatro_github/index.html",
    "href": "posts/website_quatro_github/index.html",
    "title": "Quartoでウェブサイトを作ってGitHubで公開する",
    "section": "",
    "text": "簡単にウェブサイトを作成・公開・維持する方法はないかと模索していたところ、QuartoとGitHub Pagesを使った方法にたどり着きました。これなら楽そうと思い、10年くらい手つかずだった個人ウェブサイトを刷新しました。ここでは、備忘録も兼ねて手順を簡単に解説します。"
  },
  {
    "objectID": "posts/website_quatro_github/index.html#quartoとは",
    "href": "posts/website_quatro_github/index.html#quartoとは",
    "title": "Quartoでウェブサイトを作ってGitHubで公開する",
    "section": "Quartoとは",
    "text": "Quartoとは\nQuartoとは、拡張Markdown形式データ（拡張子は.qmd）を作成し、それを基にpandocによってHTMLファイル、PDFファイルなど様々な形式に変換して文書を構築するアプリケーションです。Jupyter notebookのように、文書内でコードを実行しその結果を表示することもできます。\nQuartoを使ったウェブサイト構築のメリットは以下の通り。\n\nMarkdownで比較的簡単に記述できる。HTMLを編集するのに比べて、更新がだいぶ楽。\nブログ形式のサイトも作成できる。\nテンプレートでもそれなりのデザイン。"
  },
  {
    "objectID": "posts/website_quatro_github/index.html#ツールのセットアップ",
    "href": "posts/website_quatro_github/index.html#ツールのセットアップ",
    "title": "Quartoでウェブサイトを作ってGitHubで公開する",
    "section": "ツールのセットアップ",
    "text": "ツールのセットアップ\n\nQuarto\nQuartoウェブサイトのトップページからGet Startedボタンをクリックしてダウンロードサイトに飛びます。OSに合わせたバージョンをインストールします。\n\n\nVisual Studio Code\nMarkdownの編集、GitHubとの連携に使います。VS Codeウェブサイトからインストールします。\nVS Codeを立ち上げ、Quartoの拡張機能 (Extentions) でQuartを検索し、インストールします。\nQuartoのダウンロードサイトでも手順を解説しているので参考にしてください。\n\n\nGit\n更新の管理とGitHubへのアップロードに使います。VS Codeと連携して使います。まず、GitウェブサイトからOSに合わせてインストールします。\n\nChoosing the default editor used by Gitでは、VS Codeを選択します。\nAdjusting the name of the initial branch in new repositoriesでは、初期ブランチ名をどうするか選択します。GitHubは “main” を採用しているのでOverride the deault branch name for new repositoriesを選択し、初期ブランチ名にmainと入力します。\n\nあとはデフォルトの設定で良いかと思います。変更する場合は各自調べてください。\n\n\nGitHub\nGitHubでアカウントを作成します。\nアカウントを作ったら、ウェブサイト公開用のリポジトリを作成します。このとき、リポジトリ名を&lt;username&gt;.github.ioとすると、ウェブサイトURLは\nhttps://&lt;Username&gt;.github.io/\nになります。"
  },
  {
    "objectID": "posts/website_quatro_github/index.html#ウェブサイトの作成",
    "href": "posts/website_quatro_github/index.html#ウェブサイトの作成",
    "title": "Quartoでウェブサイトを作ってGitHubで公開する",
    "section": "ウェブサイトの作成",
    "text": "ウェブサイトの作成\n\nテンプレートから作成\nQuartoのウェブサイトテンプレートを使って作成を始めます。\n\nウェブサイト作成用のフォルダを用意します。\nVS Codeを起動してCtrl-Shift-PCtrl-Shift-Pでコマンドパレットを開き、Quarto: Create Projectと入力します。\nWebsite Projectを選択し、1.で作ったフォルダを選択してChoose Project Directoryを押します。\nフォルダの中に、index.qmdや_qualt.ymlといったテンプレートファイル一式が作られます。\n\n\n\nテンプレートの編集\nテンプレートファイルを編集したり、新しいファイルを追加したりしてウェブサイトを作成していきます。ウェブサイト全体の設定は_quarto.ymlに記述します。初期状態では\nproject:\n  type: website\n\nwebsite:\n  title: \"&lt;website title&gt;\"\n  navbar: #ページナビの設定\n    left: #左詰め\n      - href: index.qmd #1つめのリンク先\n        text: Home #1つ目のリンク先のテキスト（設定しないとリンク先のタイトルが使われる）\n      - about.qmd #2つ目のリンク先\n\nformat:\n  html:\n    theme: cosmo #ページデザイン\n    css: styles.css #CSSファイル（使わないなら消してよい）\n    toc: true #ページ内目次のON/OFF（ページごとの設定も可）\nとなっています。（コメントは筆者の追記）\n詳しい作成方法については、Quatro &gt; Websitesを参照してください。\n\n\nプレビューとレンダリング\nindex.qmdなど作成・編集したファイルを開き、VS Code右上のPreviewボタンをクリックすると、ウェブサイトのプレビューを表示できます。Ctrl-Shift-KCtrl-Shift-Kでも可能です。\n\n全ページをレンダリングする場合は、\n&gt; quarto render\nを実行してください。\nレンダリングで作成されたファイルは/Docs/フォルダに置かれます。ウェブサイトを公開する際は、このフォルダを指定します。"
  },
  {
    "objectID": "posts/website_quatro_github/index.html#ウェブサイトの公開",
    "href": "posts/website_quatro_github/index.html#ウェブサイトの公開",
    "title": "Quartoでウェブサイトを作ってGitHubで公開する",
    "section": "ウェブサイトの公開",
    "text": "ウェブサイトの公開\n\nGitのリポジトリ作成とGitHubとの連携\nフォルダのリポジトリ登録とGitHubへの公開を同時に行います。\nVS CodeのSoruce Controlをクリックし、GitHubに公開をクリックします。\n\nGitHubへのサインインを求められるので、許可をクリックしてブラウザからGitHubにサインインし、Authorize-Visual-Studio-Codeをクリックし、VS CodeとGitHubを連携させます。\n\nVS Codeに戻り、Publish to GitHub public repositoryを選択し、リポジトリに含めるファイルを選択してOKをクリックします1。これで、Gitリポジトリの作成とGitHubリモートリポジトリ登録が完了しました。\n\n\nGitHub Pagesの設定\nGitHubのリポジトリページで、リポジトリメニューからSettingsページに飛びます。Pagesの項目で、Branchをmain、フォルダをdocsに設定し、Saveをクリックします。しばらく待ち、https://&lt;Username&gt;.github.io/にアクセスして公開されたウェブサイトを確認してください。\n\n\n\nウェブサイトの更新\nウェブサイトのソースファイル（.qmdファイルなど）をVS Codeで編集した際は、\n\nプレビューかレンダリング2でHTMLを更新\nVS CodeのSoruce Controlから変更の横の+ボタンをクリックして、変更を”add”\nコミットメッセージを記入してコミットをクリックしローカルリポジトリに”commit”\n“変更の同期”をクリックしてGitHubに”push”\n\nで更新できます。"
  },
  {
    "objectID": "posts/website_quatro_github/index.html#参考",
    "href": "posts/website_quatro_github/index.html#参考",
    "title": "Quartoでウェブサイトを作ってGitHubで公開する",
    "section": "参考",
    "text": "参考\n\nQuatro &gt; Websites\n気軽にウェブサイト"
  },
  {
    "objectID": "posts/website_quatro_github/index.html#footnotes",
    "href": "posts/website_quatro_github/index.html#footnotes",
    "title": "Quartoでウェブサイトを作ってGitHubで公開する",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nこの方法では、ソースファイルもGitHubリポジトリ上で公開されます。ソースファイルを非公開にするには、.gitignoreファイルを設定します。↩︎\nプレビューの場合は、編集中のページのみがレンダリングされるようです。プレビュー内のリンクをクリックすると、開かれたページもレンダリングされるようです。↩︎"
  },
  {
    "objectID": "posts/your-space-our-place/index.html",
    "href": "posts/your-space-our-place/index.html",
    "title": "いつもの場所",
    "section": "",
    "text": "2011年、東日本大震災の直後に作った曲。\n震災直後、短期留学先だったドイツからの帰国便の中でメロディーとコードを作りました。歌詞は研究室の先輩にお願いしました。突然の出来事で大切な場所がなくなってしまったとしても、僕らはまた「いつもの場所」を作っていけるという希望を歌っています。\n\nVocal\n\nLen Kagamine\n\nMusic\n\nSho Okubo\n\nLyrics\n\nMICCHY\n\nLicense"
  },
  {
    "objectID": "posts/your-space-our-place/index.html#abstract",
    "href": "posts/your-space-our-place/index.html#abstract",
    "title": "いつもの場所",
    "section": "",
    "text": "2011年、東日本大震災の直後に作った曲。\n震災直後、短期留学先だったドイツからの帰国便の中でメロディーとコードを作りました。歌詞は研究室の先輩にお願いしました。突然の出来事で大切な場所がなくなってしまったとしても、僕らはまた「いつもの場所」を作っていけるという希望を歌っています。\n\nVocal\n\nLen Kagamine\n\nMusic\n\nSho Okubo\n\nLyrics\n\nMICCHY\n\nLicense"
  },
  {
    "objectID": "posts/your-space-our-place/index.html#play",
    "href": "posts/your-space-our-place/index.html#play",
    "title": "いつもの場所",
    "section": "Play",
    "text": "Play\n\n\n\n【鏡音レン】いつもの場所【オリジナル】"
  },
  {
    "objectID": "posts/your-space-our-place/index.html#lyrics",
    "href": "posts/your-space-our-place/index.html#lyrics",
    "title": "いつもの場所",
    "section": "Lyrics",
    "text": "Lyrics\n当たり前だと思っていた景色 疑わなかった日常\n不意に崩れ去った今を 受け入れたくない気持ちがわきあがる\n悲しみに浸りたくなるだろう こんなの夢だと思いたい\nでもそんなことじゃ 何も始まらない\n前だけ見つめて 歩いていこうよ\nいつもの場所はどこにもないけれど\nI’m always with you ボクがそばにいよう\n明けない夜はないのだから\n手を取り合って生きていこう\n幼いころから見ていた空 肌に感じていた風\nすべて流れ去った今が ボクたちの心を押しつぶす\n何を恨めばいいのだろう 誰かの所為にしてしまいたい\nでもそんなことに意味はない だから\nすべてを受け入れ 進んでいこうよ\nいつもの場所はどこにもないけれど\nI will smile at you ボクが笑いかけよう\n残酷な今に 逃げたくなるけど\n未来(あす)を一緒に見にいこう\nすべてを包む暗い闇も いつか笑い飛ばせるように\nいつもの場所はどこにもないけれど\nI will smile at you ボクが笑いかけよう\n眠れぬ夜も 泣きたくなる朝も\nI’m always with you ボクがそばにいよう\nいつもの場所は壊れてしまったけど\n「いつもの場所」を作っていこう\nまた作っていこう\nYou can make new space\nI will be with you\nWe can make our place\nIt’s for you and me"
  },
  {
    "objectID": "README-Okubo-Surface2.html",
    "href": "README-Okubo-Surface2.html",
    "title": "PureHertz Labratory",
    "section": "",
    "text": "PureHertz Labratory\nWebsite repository of PureHertz.\nhttps://purehertz.github.io/"
  }
]